unit U_CadastroBase;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, StdCtrls, Buttons, ExtCtrls, DB;

type
  TFrm_CadastroBase = class(TForm)
    pnlBottom: TPanel;
    pnlBackground: TPanel;
    btnConfirmar: TBitBtn;
    btnCancelar: TBitBtn;
    DS: TDataSource;
    procedure btnCancelarClick(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnConfirmarClick(Sender: TObject);
    procedure FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
    procedure FormShow(Sender: TObject);
    procedure FormCreate(Sender: TObject);
  private
    function IsValidFields: boolean; overload;
  protected
    MultEmp: shortstring;
    procedure LookupComboBoxEnter(Sender: TObject);
    procedure CriaForm(AFrmClass: TFormClass; AModal: boolean = False);
    procedure FocusControl(AField: TField);
    function IsValidFields(AFields: array of TField): Boolean; overload;
    function IsValidNumberFields(const AFields: array of TField): boolean;
    function Count(const ATable, AField: string; const AValue: variant): integer;
  published
    {$REGION 'OnKeyPress Events'}
    procedure NoAccentKeyPress(Sender: TObject; var Key: Char);
    procedure OnlyIntegerKeyPress(Sender: TObject; var Key: Char);
    procedure OnlyNumberKeyPress(Sender: TObject; var Key: Char);
    {$ENDREGION}

    {$REGION 'OnExit Events'}
    procedure NumberFieldNotIsNullExit(Sender: TObject);
    {$ENDREGION}
  public
    { Public declarations }
  end;

var
  Frm_CadastroBase: TFrm_CadastroBase;

implementation

uses U_DMRet, DBCtrls, ComCtrls, U_FuncUtils;

{$R *.dfm}

procedure TFrm_CadastroBase.btnCancelarClick(Sender: TObject);
begin
  Close;
end;

procedure TFrm_CadastroBase.btnConfirmarClick(Sender: TObject);
var
  msg: string;
begin
  if not IsValidFields then Exit;

  case DS.DataSet.State of
    dsEdit: msg := 'Confirma a alteração deste Registro?';
    dsInsert: msg := 'Confirma essa novo Registro?';
  end;

  if Messagebox(handle,pchar(msg),'ATENÇÃO',MB_ICONQUESTION+MB_YESNO) = IDYES then
  try
    DS.DataSet.Post;
  except
    on E: Exception do
      if E.Message <> 'Operation aborted' then
        raise Exception.Create(E.Message);
      //
  end;

  ModalResult := mrOk;
end;

function TFrm_CadastroBase.Count(const ATable, AField: string;
  const AValue: variant): integer;
const
  SQL_COUNT = 'select count(*) from %s where %s = :VALUE';
var
  Sql: string;
begin
  Sql    := Format(SQL_COUNT, [ATable, AField]);
  Result := DMRet.OpenSQL(Sql, [AValue]);
end;

procedure TFrm_CadastroBase.CriaForm(AFrmClass: TFormClass; AModal: boolean);
begin
  with AFrmClass.Create(nil) do
  try
    if not AModal then
    begin
      Show;
      Exit;
    end;

    try
      Visible := False;
      ShowModal;
    finally
      Free;
    end;
  except
    on E: Exception do
      MessageDlg(E.Message, mtError, [mbOK], 0);
  end;
end;

procedure TFrm_CadastroBase.FocusControl(AField: TField);
var
  Controls: TStringList;
  PageControl, TabSheet: TComponent;
  i, j: Integer;
begin
  Controls := TStringList.Create;

  try
    if Trim(AField.Origin) <> '' then
    begin
      TFuncUtils.Split('>', AField.Origin, Controls);

      for i := 0 to Controls.Count div 2 - 1 do
      begin
        j := i * 2;
        PageControl := Self.FindComponent(Controls[j]);
        TabSheet    := Self.FindComponent(Controls[j+1]);

        if not Assigned(PageControl) then
          raise Exception.CreateFmt('O controle "%s" não foi encontrado', [Controls[j]]);

        if not Assigned(TabSheet) then
          raise Exception.CreateFmt('O controle "%s" não foi encontrado', [Controls[j+1]]);

        TPageControl(PageControl).ActivePage := TabSheet as TTabSheet;
      end;
    end;

    AField.FocusControl;
  finally
    Controls.Free;
  end;
end;

procedure TFrm_CadastroBase.FormClose(Sender: TObject; var Action: TCloseAction);
var
  i: integer;
begin
  if (DS.Dataset.State in [dsInsert, dsEdit]) then
    DS.DataSet.Cancel;
  //
  for i := 0 to ComponentCount - 1 do
    if Components[i] is TDataSet then
      (Components[i] as TDataSet).Close;
    //
end;

procedure TFrm_CadastroBase.FormCreate(Sender: TObject);
const
  SQL = 'select PAR_MULTIEMP from PARAMS';
var
  i: integer;
begin

  {Rodrigo 20/03/2015
   o metodo Abaixo estava no OnShow, porem devido condições do campo "chave"
   que codifica a tabela do IBPT nos cadastros (Produto, Combustivel e Tipo de Tividade do Municipio)
   precisarem de utilizar caracteres (Maiusculos e Minusculos) foi necessario trazer este
   metodo para o OnCreate}
  for i := 0 to ComponentCount - 1 do
    if Components[i] is TEdit then
      (Components[i] as TEdit).CharCase := ecUpperCase
    else if Components[i] is TDBEdit then
      (Components[i] as TDBEdit).CharCase := ecUpperCase
    else if Components[i] is TDBLookupComboBox then
        (Components[i] as TDBLookupComboBox).OnEnter := LookupComboBoxEnter;


  MultEmp := ShortString(DMRet.OpenSQL(SQL, []));
  Application.HintPause     := 500;   //meio segundo para mostrar o hint
  Application.HintHidePause := 10000; //tempo de duração = 10 segundos
end;

procedure TFrm_CadastroBase.FormKeyDown(Sender: TObject; var Key: Word; Shift: TShiftState);
begin
  case Key of
    VK_RETURN: Perform(WM_NEXTDLGCTL,0,0);
    VK_ESCAPE: Close;
  end;
end;

procedure TFrm_CadastroBase.FormShow(Sender: TObject);
begin
   if MultEmp = 'F' then
    btnConfirmar.Visible := False;
  //
  case DS.DataSet.State of
    dsEdit: Caption := Caption + ' - Alterar';
    dsInsert: Caption := Caption + ' - Novo';
  end;
end;

function TFrm_CadastroBase.IsValidFields(AFields: array of TField): Boolean;
var
  Controls: TStringList;
  PageControl, TabSheet: TComponent;
  Field: TField;
begin
  Result := True;

  for Field in AFields do
    if Field.IsNull or (Trim(Field.Value) = '') then
    begin
      Application.MessageBox(
        Pchar('O campo "'+Field.DisplayLabel+'" não pode ficar vazio.'),
        'AVISO',MB_ICONINFORMATION);
      FocusControl(Field);
      Result := False;
      Break;
    end
end;

function TFrm_CadastroBase.IsValidNumberFields(
  const AFields: array of TField): boolean;
var
  Field: TField;
begin
  Result := True;

  for Field in AFields do
    if not (Field is TNumericField) then
      Continue
    else
    if Field.Required and (Field.AsFloat <= 0) then
    begin
      Application.MessageBox(PChar('O campo "' + Field.DisplayName + '" deve ser maior que "0,00".'),
        'ATENÇÃO!', MB_ICONINFORMATION);
      FocusControl(Field);
      Result := False;
      Break;
    end;
end;

function TFrm_CadastroBase.IsValidFields: boolean;
var
  Field: TField;
  Fields: array of TField;
begin
  Result := True;

  for Field in DS.DataSet.Fields do
    if Field.Required then
    begin
      SetLength(Fields, Length(Fields)+1);
      Fields[High(Fields)] := Field;
    end;

  Result := IsValidFields(Fields);
end;

procedure TFrm_CadastroBase.NoAccentKeyPress(Sender: TObject;
  var Key: Char);
begin
  case Key of
    'á': Key := 'a';
    'é': Key := 'e';
    'í': Key := 'i';
    'ó': Key := 'o';
    'ú': Key := 'u';
    'à': Key := 'a';
    'è': Key := 'e';
    'ì': Key := 'i';
    'ò': Key := 'o';
    'ù': Key := 'u';
    'â': Key := 'a';
    'ê': Key := 'e';
    'î': Key := 'i';
    'ô': Key := 'o';
    'û': Key := 'u';
    'ä': Key := 'a';
    'ë': Key := 'e';
    'ï': Key := 'i';
    'ö': Key := 'o';
    'ü': Key := 'u';
    'ã': Key := 'a';
    'õ': Key := 'o';
    'ñ': Key := 'n';
    'ç': Key := 'c';
    'Á': Key := 'A';
    'É': Key := 'E';
    'Í': Key := 'I';
    'Ó': Key := 'O';
    'Ú': Key := 'U';
    'À': Key := 'A';
    'È': Key := 'E';
    'Ì': Key := 'I';
    'Ò': Key := 'O';
    'Ù': Key := 'U';
    'Â': Key := 'A';
    'Ê': Key := 'E';
    'Î': Key := 'I';
    'Ô': Key := 'O';
    'Û': Key := 'U';
    'Ä': Key := 'A';
    'Ë': Key := 'E';
    'Ï': Key := 'I';
    'Ö': Key := 'O';
    'Ü': Key := 'U';
    'Ã': Key := 'A';
    'Õ': Key := 'O';
    'Ñ': Key := 'N';
    'Ç': Key := 'C';
  end;

  if not(Key in ['0'..'9', 'A'..'Z', 'a'..'z', '.', '/', '-', ',', '\', Chr(8), Chr(32)]) then
    Key := #0;
  //
end;

procedure TFrm_CadastroBase.NumberFieldNotIsNullExit(Sender: TObject);
begin
  if not (Sender is TDBEdit) then Exit;

  if TDBEdit(Sender).Field.IsNull then
    TDBEdit(Sender).Field.AsFloat := 0;
  //
end;

procedure TFrm_CadastroBase.LookupComboBoxEnter(Sender: TObject);
begin
   if Sender is TDBLookupComboBox then
   Begin
     //Condição Adicionada a Pedidio da SOVIL, pois quando o campo já possuir valor
     //Não e para executar o "DROPDOWN" - Rodrigo 21/11/2014
     if TDBLookupComboBox(Sender).Field.IsNull then
       TDBLookupComboBox(Sender).DropDown;
   End;
  //
end;

procedure TFrm_CadastroBase.OnlyIntegerKeyPress(Sender: TObject; var Key: Char);
begin
  if not(Key in ['0'..'9', Chr(8)]) then Key := #0;
end;

procedure TFrm_CadastroBase.OnlyNumberKeyPress(Sender: TObject; var Key: Char);
begin
  if not(Key in ['0'..'9', Chr(8), ',']) then Key := #0;
end;

end.
