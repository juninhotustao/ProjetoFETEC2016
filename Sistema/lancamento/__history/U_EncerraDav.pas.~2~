unit U_EncerraDav;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, U_EncerraDavBase, DB, StdCtrls, Mask, DBCtrls, Buttons, ExtCtrls,
  U_PrintDav;

type
  TEmpresa = record
    Nome: string;
    Fantasia: string;
    Cnpj: string;
    IE: string;
    Bairro: string;
    Telefone: string;
  end;

  Tfrm_EncerraDav = class(Tfrm_EncerraDavBase)
    DS_Cliente: TDataSource;
    DS_Vendedor: TDataSource;
    DS_TipoPagto: TDataSource;
    Ds_Otica: TDataSource;
    procedure btn_EncerraClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
  private
    FEmp: TEmpresa;
  protected
    procedure Imprimir; override;
    procedure GeraFinanceiro; override;
    //
    function GetKeyField: string; override;
    function PreencheCabecalho : TCabecalho;
    function PreencheItens : TItens;
    function PreencheRodape : TRodape;
    function PreencheDadosAdicionais: TDadosAdicionais;
  public
    { Public declarations }
  end;

var
  frm_EncerraDav: Tfrm_EncerraDav;

implementation

uses U_Dav, DBClient, U_DMRet, MaskUtils, StrUtils, U_FuncUtils;

{$R *.dfm}

procedure Tfrm_EncerraDav.btn_EncerraClick(Sender: TObject);
begin
  if not Tfrm_Dav.DavIsPendente(DS.DataSet.FieldByName('DAV_ID').Value) then
  begin
    MessageBox(Handle, 'Não é possível encerrar este DAV, pois a situação do '+
      'mesmo é diferente de Pendente.','AVISO',MB_ICONINFORMATION);
    btn_PendenteClick(Sender);
    Exit;
  end;
  //
  DS.DataSet.FieldByName('DAV_SITUACAO').Value := 'I';
  DS.DataSet.FieldByName('DAV_DT_EMISSAO').Value := Now;
  //
  inherited;
end;

procedure Tfrm_EncerraDav.FormShow(Sender: TObject);
const
  SqlEmpresa =
    'select EMP_NOME, EMP_FANTASIA, EMP_CGC, EMP_INSCRICAOESTADUAL, ' +
    'EMP_BAIRRO, EMP_TELEFONE from EMPRESAS';
begin
  inherited;
  //
  with TClientDataSet.Create(nil) do
  try
    Data := DMRet.GetData(SqlEmpresa, []);

    if IsEmpty then Exit;

    FEmp.Nome     := FieldByName('EMP_NOME').AsString;
    FEmp.Fantasia := FieldByName('EMP_FANTASIA').AsString;
    FEmp.Cnpj     := FieldByName('EMP_CGC').AsString;
    FEmp.IE       := FieldByName('EMP_INSCRICAOESTADUAL').AsString;
    FEmp.Bairro   := FieldByName('EMP_BAIRRO').AsString;
    FEmp.Telefone := FieldByName('EMP_TELEFONE').AsString;
  finally
    Free;
  end;
end;

procedure Tfrm_EncerraDav.GeraFinanceiro;
begin
  inherited;
  //Dav não gera financeiro
end;

function Tfrm_EncerraDav.GetKeyField: string;
begin
  Result := 'DAV_ID';
end;

procedure Tfrm_EncerraDav.Imprimir;
begin
  inherited;
  //Imprimindo o DAV
  with TPrintDav.Create do
  try
    Cabecalho       := PreencheCabecalho;
    Itens           := PreencheItens;
    Rodape          := PreencheRodape;
    DadosAdicionais := PreencheDadosAdicionais;
    Imprimir;
  finally
    Free;
  end;
end;

function Tfrm_EncerraDav.PreencheCabecalho: TCabecalho;
var
  CnpjCpf : ShortString;
begin
  Result := TCabecalho.Create;
  DS_Vendedor.DataSet.Locate('VDD_ID', DS.DataSet.FieldByName('VDD_ID').Value,[]);
  //
  with Result.Linhas do
  begin
    Add(TLinha.Create(39, 'DOCUMENTO AUXILIAR DE VENDA - ORÇAMENTO DE VENDA',
      [TTipoFonte.comp12, TTipoFonte.negrito]));
    Add(TLinha.Create(13, 'NÃO É DOCUMENTO FISCAL - NÃO É VÁLIDO COMO RECIBO E COMO GARANTIA DE MERCADORIA',
      [TTipoFonte.comp12, TTipoFonte.negrito]));
    Add(TLinha.Create(62, 'NÃO COMPROVA PAGAMENTO', [TTipoFonte.comp12, TTipoFonte.negrito]));

    Add(TLinha.Create(60, 'Identificação do Estabelecimento Emitente', [TTipoFonte.negrito]));
    Add(TLinha.Create(03, 'DENOMINAÇÃO: '+Copy(FEmp.Nome,1,50)+' - '+Copy(FEmp.Fantasia,1,50)+
      '   CNPJ: '+FormatMaskText(TConstants.MASK_CNPJ, FEmp.Cnpj)+
      '   TEL.:'+FormatMaskText(TConstants.MASK_TEL, FEmp.Telefone), [TTipoFonte.comp17, TTipoFonte.negrito]));

    Add(TLinha.Create(03, 'Identificação do Destinatário', [TTipoFonte.negrito]));

    with DS_Cliente.DataSet do
    begin
      CnpjCpf := IfThen(FieldByName('CLI_TIPOPES').AsString = 'J', 'CNPJ: '+FormatMaskText(TConstants.MASK_CNPJ,
        FieldByName('CLI_CGC').AsString), 'CPF: '+FormatMaskText(TConstants.MASK_CPF, FieldByName('CLI_CPF').AsString));

      Add(TLinha.Create(03, format('%-50s',['NOME: '+ copy(FieldByName('CLI_ID').AsString+'-'+FieldByName('CLI_NOME').AsString,1,43)])+
        Format('%-26s', [CnpjCpf]) + Format('%-21s', ['IE: '+FieldByName('CLI_INSCRICAO').AsString]) + Format('%-19s', ['TEL: '+
        FormatMaskText(TConstants.MASK_TEL, FieldByName('CLI_TELEFONE').AsString)]) + 'HORA: '+FormatDateTime('HH:MM',
        DS.DataSet.FieldByName('DAV_DT_EMISSAO').AsDateTime), [TTipoFonte.comp17]));

      Add(TLinha.Create(03, format('%-97s',[copy('ENDEREÇO: '+FieldByName('CLI_ENDERECO').AsString+' N°: '+FieldByName('CLI_NUMERO').AsString+'  BAIRRO: '+
        FieldByName('CLI_BAIRRO').AsString+'  CIDADE: '+ FieldByName('CLI_CIDADE').AsString+'-'+FieldByName('CLI_ESTADO').AsString,1,96)])+
        Format('%-19s', ['TEL: '+FormatMaskText(TConstants.MASK_TEL, FieldByName('CLI_TELEFONE2').AsString)]) + 'DATA: '+
        DS.DataSet.FieldByName('DAV_DATA').AsString, [TTipoFonte.comp17]));
    end;

    Add(TLinha.Create(03, format('Nº DO DOCUMENTO: %-15.10d',[DS.DataSet.FieldByName('DAV_ID').AsInteger])+format('%-33s',
      ['Nº DO DOCUMENTO FISCAL: ']) + format('%-32s',[copy('VENDEDOR: '+ DS_Vendedor.DataSet.FieldByName('VDD_NOME').Value,1,34)])+
      'COND. PAGTO: '+copy(DS_TipoPagto.DataSet.FieldByName('TPG_DESCRICAO').Value,1,24), [TTipoFonte.comp17]));
  end;
end;

function Tfrm_EncerraDav.PreencheDadosAdicionais: TDadosAdicionais;
var
  Col: integer;
  s, span: string;
begin
  Result := TDadosAdicionais.Create;

  if Ds_Otica.DataSet.IsEmpty then Exit;

  with Result.Linhas do
  begin
    Col := 55-(Length(FEmp.Fantasia) div 2);

    Add(TLinha.Create(Col, FEmp.Fantasia, [TTipoFonte.comp12, TTipoFonte.expandido]));
    Add(TLinha.Create(01, '', []));

//    Add(TLinha.Create(03, '+---------------+', []));
//    Add(TLinha.Create(03, '|               |', []));
//    Add(TLinha.Create(03, '+---------------+', []));

    Add(TLinha.Create(70, 'Dados Tecnicos ' + FormatFloat('000000', DS.DataSet.FieldByName('DAV_ID').AsLargeInt), [TTipoFonte.comp17]));
    Add(TLinha.Create(01, '', []));

    s := FEmp.Fantasia + ' - Bairro: ' + FEmp.Bairro;
    Col := 75-(Length(s) div 2);
    Add(TLinha.Create(Col, s, [TTipoFonte.comp17, TTipoFonte.negrito]));

    s := 'CNPJ: ' + FEmp.Cnpj + ' - IE: ' + FEmp.IE;
    Col := 75-(Length(s) div 2);
    Add(TLinha.Create(Col, s, [TTipoFonte.comp17, TTipoFonte.negrito]));

    Add(TLinha.Create(01, '', []));

    s := DS_Cliente.DataSet.FieldByName('CLI_ID').AsString + ' - ' + Copy(DS_Cliente.DataSet.FieldByName('CLI_NOME').AsString, 1, 40);
    Add(TLinha.Create(03, 'Cliente     : ' + s, [TTipoFonte.comp17]));

    if Ds_Otica.DataSet.FieldByName('DTO_DATA_ENTREGA').IsNull then
      Add(TLinha.Create(03,
        'Encomentado : ' + FormatDateTime('dd/MM/yyyy', DS.DataSet.FieldByName('DAV_DATA').AsDateTime) + '   ' +
        'Data da Entrega : ', [TTipoFonte.comp17]))
    else
      Add(TLinha.Create(03,
        'Encomendado : ' + FormatDateTime('dd/MM/yyyy', DS.DataSet.FieldByName('DAV_DATA').AsDateTime) + '   ' +
        'Data da Entrega : ' + FormatDateTime('dd/MM/yyyy', Ds_Otica.DataSet.FieldByName('DTO_DATA_ENTREGA').AsDateTime) + '  ' +
        'Hora da Entrega : ' + Ds_Otica.DataSet.FieldByName('DTO_HORA_ENTREGA').AsString, [TTipoFonte.comp17]));
    //

    //Add(TLinha.Create(03, 'Produto     :', [TTipoFonte.comp17]));

    with DS_Item.DataSet do
    begin
      First;
      while not Eof do
      begin
        if RecNo = 1 then
           Add(TLinha.Create(03, 'Produto     : '+ FieldByName('REFERENCIA').AsString +
          '    ' + FieldByName('IDV_DESCRICAO').AsString, [TTipoFonte.comp17]))
        else
          Add(TLinha.Create(19, FieldByName('REFERENCIA').AsString +
            '    ' + FieldByName('IDV_DESCRICAO').AsString, [TTipoFonte.comp17]));
        Next;
      end;
    end;

    if not DS.DataSet.FieldByName('DAV_OBSERVACAO').IsNull then
    begin
      s := Copy(DS.DataSet.FieldByName('DAV_OBSERVACAO').AsString, 1, 100);
      Add(TLinha.Create(03, 'Observacao  : ' + s, [TTipoFonte.comp17]));

      if Length(DS.DataSet.FieldByName('DAV_OBSERVACAO').AsString) > 100 then
      begin
        s := Copy(DS.DataSet.FieldByName('DAV_OBSERVACAO').AsString, 101, 100);
        Add(TLinha.Create(19, s, [TTipoFonte.comp17]));
      end;
    end;

    with Ds_Otica.DataSet do
    begin
      Add(TLinha.Create(03, '+---+----------------------------------------------------+', [TTipoFonte.comp12]));
      Add(TLinha.Create(03, '| L |        ESF.     CIL.      EIXO      DNP     ACO    |', [TTipoFonte.comp12]));

      if Params.ParOrcNovosCamposOtica then
        span := Format('P: %s  H: %s  DM: %s  V: %s', [
          FieldByName('DTO_P').AsString, FieldByName('DTO_H').AsString,
          FieldByName('DTO_DM').AsString, FieldByName('DTO_V').AsString
        ])
      else
        span := Format('Aro+Ponte : %s', [FieldByName('DTO_ARO_PONTE').AsString]);
      //
      Add(TLinha.Create(03, Format('| O | OD     %3s      %3s       %3s       %3s     %3s    |  %s', [
        FieldByName('DTO_ESF_LONGE_DIR').AsString, FieldByName('DTO_CIL_LONGE_DIR').AsString,
        FieldByName('DTO_EIX_LONGE_DIR').AsString, FieldByName('DTO_DNP_LONGE_DIR').AsString,
        FieldByName('DTO_ACO_LONGE_DIR').AsString, span]), [TTipoFonte.comp12]));

      if Params.ParOrcNovosCamposOtica then
        span := Format('C. Base   : %s',[FieldByName('DTO_CBASE').AsString])
      else
        span := Format('Aro       : %s',[FieldByName('DTO_ARO').AsString]);
      //
      Add(TLinha.Create(03, Format('| N |                                                    |  %s', [
        span]), [TTipoFonte.comp12]));

      Add(TLinha.Create(03, Format('| G | OE     %3s      %3s       %3s       %3s     %3s    |  Alt. Pel. : %s', [
        FieldByName('DTO_ESF_LONGE_ESQ').AsString, FieldByName('DTO_CIL_LONGE_ESQ').AsString,
        FieldByName('DTO_EIX_LONGE_ESQ').AsString, FieldByName('DTO_DNP_LONGE_ESQ').AsString,
        FieldByName('DTO_ACO_LONGE_ESQ').AsString, FieldByName('DTO_ALT_PEL').AsString]), [TTipoFonte.comp12]));

      Add(TLinha.Create(03, '| E |                                                    |', [TTipoFonte.comp12]));
      Add(TLinha.Create(03, '+---+----------------------------------------------------+', [TTipoFonte.comp12]));
      Add(TLinha.Create(03, '| P |        ESF.     CIL.      EIXO      DNP     ACO    |', [TTipoFonte.comp12]));

      Add(TLinha.Create(03, Format('| E | OD     %3s      %3s       %3s       %3s     %3s    |  Medico      : %-25s', [
        FieldByName('DTO_ESF_PERTO_DIR').AsString, FieldByName('DTO_CIL_PERTO_DIR').AsString,
        FieldByName('DTO_EIX_PERTO_DIR').AsString, FieldByName('DTO_DNP_PERTO_DIR').AsString,
        FieldByName('DTO_ACO_PERTO_DIR').AsString, FieldByName('MED_NOME').AsString]), [TTipoFonte.comp12]));

      Add(TLinha.Create(03, Format('| R |                                                    |  Vendedor    : %-25s', [
        DS_Vendedor.DataSet.FieldByName('VDD_NOME').AsString]), [TTipoFonte.comp12]));

      Add(TLinha.Create(03, Format('| T | OE     %3s      %3s       %3s       %3s     %3s    |  Vencto Rec. : %-25s', [
        FieldByName('DTO_ESF_PERTO_ESQ').AsString, FieldByName('DTO_CIL_PERTO_ESQ').AsString,
        FieldByName('DTO_EIX_PERTO_ESQ').AsString, FieldByName('DTO_DNP_PERTO_ESQ').AsString,
        FieldByName('DTO_ACO_PERTO_ESQ').AsString, FieldByName('DTO_VECTO_RECEITA').AsString]), [TTipoFonte.comp12]));

      Add(TLinha.Create(03, '| O |                                                    |', [TTipoFonte.comp12]));
      Add(TLinha.Create(03, '+---+----------------------------------------------------+', [TTipoFonte.comp12]));
    end;
  end;
end;

function Tfrm_EncerraDav.PreencheItens: TItens;
var
  Dav_Id : LongInt;
begin
  //Feito este procedimento para evitar que espertinhos lançe em dois computadores o mesmo
  //DAV e depois envie o DAV impresso e diga que o mesmo está diferente do computador
  Dav_Id := DS.DataSet.FieldByName('DAV_ID').Value;
  //
  DS.DataSet.Close;
  TClientDataSet(DS.DataSet).Params[0].Value := Dav_Id;
  DS.DataSet.Open;
  //
  Result := TItens.Create;
  //
  with DS_Item.DataSet do
    while not Eof do
    begin
      DS_Vendedor.DataSet.Locate('VDD_ID', FieldByName('VDD_ID').Value,[]);
      //
      Result.Itens.Add(TItem.Create(
        FieldByName('NUM_ITEM').AsInteger, copy(FieldByName('REFERENCIA').Value,1,16),
        (FieldByName('IDV_DESCRICAO').Value + ' ' + FieldByName('COR_DESCRICAO').Value + ' - '
        + FieldByName('GRA_DESCRICAO').Value), FieldByName('UNIDADE').Value,
        FieldByName('IDV_QTDE').Value, FieldByName('IDV_VLR_UN_BASE').Value,
        FieldByName('IDV_DESC').Value, FieldByName('IDV_ACRES').Value,
        FieldByName('IDV_VLR_TOTAL').Value, FieldByName('IDV_SITUACAO').AsString[1],
        TFuncUtils.IfThen(Params.ParOrcUmVendedor = 'S', Null, DS_Vendedor.DataSet.
        FieldByName('VDD_NOME').Value), FieldByName('PRO_ID').IsNull
      ));
      //
      Next;
    end;
end;

function Tfrm_EncerraDav.PreencheRodape: TRodape;
begin
  Result := TRodape.Create;
  //
  Result.SubTotal   := DS_Item.DataSet.FieldByName('TOTAL').Value;
  Result.TotalDesc  := DS.DataSet.FieldByName('DAV_DESCONTO').Value;
  Result.TotalDav   := DS.DataSet.FieldByName('TOTAL_DAV').Value;
  Result.Observacao := DS.DataSet.FieldByName('DAV_OBSERVACAO').AsString;
end;

end.
