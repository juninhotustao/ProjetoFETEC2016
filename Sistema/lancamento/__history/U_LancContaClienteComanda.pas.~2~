unit U_LancContaClienteComanda;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, U_LancContaCliente, Data.FMTBcd,
  Vcl.Menus, Data.DB, Datasnap.DBClient, Datasnap.Provider, Data.SqlExpr,
  Vcl.StdCtrls, Vcl.Buttons, Vcl.ComCtrls, Vcl.ToolWin, Vcl.DBCtrls,
  Vcl.ExtCtrls, Vcl.Grids, Vcl.DBGrids;

type
  Tfrm_LancContaClienteComanda = class(Tfrm_LancContaCliente)
    DTS_ItemICC_OBSERVACAO: TStringField;
    CDS_ItemICC_OBSERVACAO: TStringField;
    DTS_ItemVDD_ID: TIntegerField;
    CDS_ItemVDD_ID: TIntegerField;
    DSPVendedor: TDataSetProvider;
    CDSVendedor: TClientDataSet;
    CDSVendedorVDD_ID: TIntegerField;
    CDSVendedorVDD_NOME: TStringField;
    DSVendedor: TDataSource;
    procedure CDS_ItemCalcFields(DataSet: TDataSet);
    procedure btn_novClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure btn_traClick(Sender: TObject);
  private
    { Private declarations }
  public
    { Public declarations }
  end;

var
  frm_LancContaClienteComanda: Tfrm_LancContaClienteComanda;

implementation

uses U_DMRet, U_ItemContaClienteComanda, U_TransfContaClienteComanda;

{$R *.dfm}

procedure Tfrm_LancContaClienteComanda.btn_novClick(Sender: TObject);
begin
 if CDS.IsEmpty then
  begin
    MessageBox(Handle, pchar('Não é possível inserir item se não existir uma conta de cliente'),
      'AVISO',MB_ICONINFORMATION);
    Exit;
  end;
  //
  with Tfrm_ItemContaClienteComanda.Create(Self) do
  try
    try
      CDS_Item.Insert;
    except
      on E:Exception do
        raise Exception.Create(
          'Erro ao Inserir o Item da Conta de Cliente.'#10#13+
          'Erro: '+E.Message);
    end;
    //
    ShowModal;
  finally
    Free;
  end;
end;

procedure Tfrm_LancContaClienteComanda.btn_traClick(Sender: TObject);
begin
  if CDS_Item.IsEmpty then
  begin
    MessageBox(Handle, 'Não há Item a ser Transferido!','AVISO',MB_ICONINFORMATION);
    Exit;
  end;

  with Tfrm_TransfContaClienteComanda.Create(Self) do
  try
    try
      CDS_Item.Edit;
    except
      on E: Exception do
        raise Exception.CreateFmt(
          'Erro ao fazer a Transferência do Item da Conta de Cliente.'#10#13+
          'Erro: %s', [E.Message]);
    end;
    ShowModal;
  finally
    Free;
  end;
end;

procedure Tfrm_LancContaClienteComanda.CDS_ItemCalcFields(DataSet: TDataSet);
const
  SqlTransf =
    'select CON_NUM from CONTA_CLIENTE where CON_ID = :CON_ID';

  SqlItem =
    'select REFERENCIA, DESCRICAO from VW_ITEM where TIPO = 0 and ID = :ID';

  SQL_COUNT =
    ' SELECT' +
    '   COUNT(*)' +
    ' FROM' +
    '   ITEM_CONTA_CLIENTE' +
    ' WHERE' +
    '   CON_ID = :CON_ID AND ICC_ID <= :ICC_ID';
var
  Transf: string;
begin
  inherited;

  if (DataSet.State <> dsInternalCalc) or
      DataSet.FieldByName('PRO_ID').IsNull then
    Exit;
  //

  Transf := CDS_ItemICC_OBSERVACAO.AsString;

  if not DataSet.FieldByName('CON_ID_ORIGEM').IsNull then
    Transf := Transf + '->Transf. da Conta de Cliente ' + DMRet.OpenSQL(SqlTransf, [
      DataSet.FieldByName('CON_ID_ORIGEM').Value
    ])
  else if DataSet.FieldByName('ICC_SITUACAO').Value = 'C' then
    TransF := 'CANCELADO';
  //

  DataSet.FieldByName('TRANSFERENCIA').Value := Transf;

  DataSet.FieldByName('NUM_ITEM').Value := DMRet.OpenSQL(SQL_COUNT, [
    DataSet.FieldByName('CON_ID').Value,
    DataSet.FieldByName('ICC_ID').Value
  ]);

  with TClientDataSet.Create(nil) do
  try
    Data :=  DMRet.GetData(SqlItem,[DataSet.FieldByName('PRO_ID').Value]);

    DataSet.FieldByName('REFERENCIA').AsString := Fields[0].AsString;
    DataSet.FieldByName('DESCRICAO').AsString  := Fields[1].AsString;
  finally
    Free;
  end;

end;

procedure Tfrm_LancContaClienteComanda.FormShow(Sender: TObject);
begin
  inherited;

  try
    CDSVendedor.Open
  except
    on E: Exception do
      raise Exception.Create(E.Message);
  end;
end;

end.
