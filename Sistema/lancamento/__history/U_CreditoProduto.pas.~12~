unit U_CreditoProduto;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ComCtrls, ToolWin, ExtCtrls, FMTBcd, DB, DBClient, Provider, SqlExpr,
  StdCtrls, Grids, DBGrids, DBCtrls, ImgList, Buttons, wwdbdatetimepicker,
  U_ImpCarVendaFutura;

type
  Tfrm_CreditoProduto = class(TForm)
    Panel1: TPanel;
    ToolBar1: TToolBar;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    Icones: TImageList;
    lkpNumVenda: TDBLookupComboBox;
    DBGrid1: TDBGrid;
    Label1: TLabel;
    DTS: TSQLDataSet;
    DSP: TDataSetProvider;
    CDS: TClientDataSet;
    DS: TDataSource;
    DTS_Item: TSQLDataSet;
    DS_Link: TDataSource;
    CDS_Item: TClientDataSet;
    DS_Item: TDataSource;
    DTSPRO_REFERENCIA: TStringField;
    DTSPRO_DESCRICAO: TStringField;
    DTS_ItemPEN_ID: TIntegerField;
    DTS_ItemPEN_QTDE: TFMTBCDField;
    DTS_ItemPEN_DATA: TSQLTimeStampField;
    CDSPRO_REFERENCIA: TStringField;
    CDSPRO_DESCRICAO: TStringField;
    CDSDTS_Item: TDataSetField;
    CDS_ItemPEN_ID: TIntegerField;
    CDS_ItemPEN_QTDE: TFMTBCDField;
    CDS_ItemPEN_DATA: TSQLTimeStampField;
    DSPVenda: TDataSetProvider;
    CDSVenda: TClientDataSet;
    DSVenda: TDataSource;
    CDSVendaCLI_NOME: TStringField;
    CDSVendaVEN_ID: TStringField;
    CDSQTDE_RESTANTE: TFloatField;
    btn_ConsCliente: TSpeedButton;
    DTSITV_QTDE: TFMTBCDField;
    CDSITV_QTDE: TFMTBCDField;
    DTSITV_ID: TIntegerField;
    CDSITV_ID: TIntegerField;
    DTS_ItemITV_ID: TIntegerField;
    CDS_ItemITV_ID: TIntegerField;
    CDSQTDE_BAIXADA: TFloatField;
    ToolButton3: TToolButton;
    btn_OrdCarregamento: TToolButton;
    GroupBox1: TGroupBox;
    GroupBox2: TGroupBox;
    btnOrdCarreg: TSpeedButton;
    lblDtEntrega: TLabel;
    edtDtEntrega: TwwDBDateTimePicker;
    ToolButton5: TToolButton;
    sep_OrdCarregamento: TToolButton;
    groupReqCeramica: TGroupBox;
    btnReqCeramica: TSpeedButton;
    groupEntrega: TGroupBox;
    btnEntrega: TSpeedButton;
    btn_ObsMotorista: TToolButton;
    procedure CDS_ItemAfterDelete(DataSet: TDataSet);
    procedure CDS_ItemAfterPost(DataSet: TDataSet);
    procedure CDS_ItemAfterCancel(DataSet: TDataSet);
    procedure DSPAfterUpdateRecord(Sender: TObject; SourceDS: TDataSet;
      DeltaDS: TCustomClientDataSet; UpdateKind: TUpdateKind);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure lkpNumVendaClick(Sender: TObject);
    procedure CDSCalcFields(DataSet: TDataSet);
    procedure CDS_ItemAfterInsert(DataSet: TDataSet);
    procedure btn_ConsClienteClick(Sender: TObject);
    procedure btnOrdCarregClick(Sender: TObject);
    procedure btnReqCeramicaClick(Sender: TObject);
    procedure ToolButton1Click(Sender: TObject);
    procedure ToolButton2Click(Sender: TObject);
    procedure btn_OrdCarregamentoClick(Sender: TObject);
    procedure btnEntregaClick(Sender: TObject);
    procedure btn_ObsMotoristaClick(Sender: TObject);
    procedure lkpNumVendaKeyDown(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure lkpNumVendaKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
  private
    FAdicionais: TAdicionais;
    TipoDeBaixa: ShortString;

    procedure GridLoads;
    procedure ConfigTela;
  public
    procedure OpenForm(TipoBaixa: ShortString);
  end;

var
  frm_CreditoProduto: Tfrm_CreditoProduto;

implementation

uses
  U_DMRet, U_PesqPreMoldadosOs, U_ImpCerVendaFutura, U_ImpCarVendaFuturaCer,
  U_ConOrdCarreg, U_BaixaCreditoProd, U_ExclBaixaCreditoProd, U_ImpCBLVendaFutura,
  U_ObsMotorista;

{$R *.dfm}

procedure Tfrm_CreditoProduto.btnEntregaClick(Sender: TObject);
const
  SQL =
    ' SELECT' +
    '   COUNT(*)' +
    ' FROM' +
    '   VW_ITEM_PRE_MOLDADOS' +
    ' WHERE' +
    '   VEN_ID = :VEN_ID AND DT_ENTREGA = :DT_ENTREGA';
begin
  if Trim(lkpNumVenda.Text) = '' then
  begin
    Application.MessageBox('Selecione um nº de venda futura antes de continuar.', 'AVISO',
      MB_ICONINFORMATION
    );
    lkpNumVenda.SetFocus;
    Exit;
  end;

  if DMRet.OpenSQL(SQL, [CDSVendaVEN_ID.Value, edtDtEntrega.DateTime]) = 0 then
  begin
    Application.MessageBox('Não há item para geração da entrega '+
      'nesta venda e data de entrega.', 'AVISO', MB_ICONINFORMATION
    );
    Exit;
  end;

  with TImpCBLVendaFutura.Create(edtDtEntrega.DateTime, FAdicionais) do
    try
      Imprimir(CDSVendaVEN_ID.AsInteger);
    finally
      Free;
    end;
end;

procedure Tfrm_CreditoProduto.btnOrdCarregClick(Sender: TObject);
const
  SQL =
    ' SELECT' +
    '   COUNT(*)' +
    ' FROM' +
    '   VW_ITEM_PRE_MOLDADOS' +
    ' WHERE' +
    '   VEN_ID = :VEN_ID AND DT_ENTREGA = :DT_ENTREGA';

  SQL_ =
    ' SELECT' +
    '   COUNT(*)' +
    ' FROM' +
    '   PRODUTO_ENTREGUE PE' +
    ' INNER JOIN' +
    '   ITEM_VENDA I ON PE.ITV_ID = I.ITV_ID' +
    ' INNER JOIN' +
    '   PRODUTO P ON I.PRO_ID = P.PRO_ID' +
    ' WHERE' +
    '   VEN_ID = :VEN_ID AND PEN_DATA = :PEN_DATA';
var
  ASql : string;
begin
  if Trim(lkpNumVenda.Text) = '' then
  begin
    Application.MessageBox('Selecione um nº de venda futura antes de continuar.', 'AVISO',
      MB_ICONINFORMATION
    );
    lkpNumVenda.SetFocus;
    Exit;
  end;

  if TipoDeBaixa = 'C' then
    ASql := SQL_
  else
    ASql := SQL;

  if DMRet.OpenSQL(ASql, [CDSVendaVEN_ID.Value, edtDtEntrega.DateTime]) = 0 then
  begin
    Application.MessageBox('Não há item para geração da ordem de carregamento '+
      'nesta venda e data de entrega.', 'AVISO', MB_ICONINFORMATION
    );
    Exit;
  end;

  if TipoDeBaixa  = 'P' then
  begin
    with TImpCarVendaFutura.Create(edtDtEntrega.DateTime, FAdicionais) do
      try
        Imprimir(CDSVendaVEN_ID.AsInteger);
      finally
        Free;
      end;
  end
  else if TipoDeBaixa = 'C' then
  begin
    with TImpCarVendaFuturaCer.Create(edtDtEntrega.DateTime) do
      try
        Imprimir(CDSVendaVEN_ID.AsInteger);
      finally
        Free;
      end;
  end;

end;

procedure Tfrm_CreditoProduto.btn_ConsClienteClick(Sender: TObject);
var
  Codigo: Variant;
begin
  Codigo := Tfrm_PesqPreMoldadosOs.GetIdConsultaVendaFutura;

  if VarIsNull(Codigo) then
    Exit;
  //
  lkpNumVenda.KeyValue := Codigo;
  lkpNumVendaClick(nil);
  lkpNumVenda.SetFocus;

  FAdicionais.Motorista  := '';
  FAdicionais.Observacao := '';
end;

procedure Tfrm_CreditoProduto.btn_ObsMotoristaClick(Sender: TObject);
var
  FMotorista: string;
  FObservacao: string;
begin
  Tfrm_ObsMotorista.GetResult(FMotorista, FObservacao);

  FAdicionais.Motorista  := FMotorista;
  FAdicionais.Observacao := FObservacao;

end;

procedure Tfrm_CreditoProduto.btn_OrdCarregamentoClick(Sender: TObject);
begin
  if DS.DataSet.IsEmpty then
  begin
    Application.MessageBox('Não há item para gerar a ordem de carregamento.', 'AVISO',
      MB_ICONINFORMATION
    );
    Exit;
  end;

  TFrm_ConOrdCarrega.GetOrdemCarregamento(CDSITV_ID.Value,
    CDSVendaVEN_ID.AsString, CDSPRO_DESCRICAO.Value, True);
end;

procedure Tfrm_CreditoProduto.CDSCalcFields(DataSet: TDataSet);
const
  SQL =
    ' SELECT' +
    '   ISNULL(SUM(PEN_QTDE),0)' +
    ' FROM' +
    '   PRODUTO_ENTREGUE' +
    ' WHERE' +
    '   ITV_ID = :ITV_ID';
begin
  with DataSet do
  begin
    if FieldByName('ITV_ID').IsNull then Exit;
    //
    FieldByName('QTDE_BAIXADA').Value :=
      DMRet.OpenSQL(SQL,[FieldByName('ITV_ID').Value]);
    //
    FieldByName('QTDE_RESTANTE').Value := FieldByName('ITV_QTDE').Value -
      FieldByName('QTDE_BAIXADA').Value;
  end;
end;

procedure Tfrm_CreditoProduto.CDS_ItemAfterCancel(DataSet: TDataSet);
begin
  if CDS.State = dsEdit then
    CDS.Cancel;
end;

procedure Tfrm_CreditoProduto.CDS_ItemAfterDelete(DataSet: TDataSet);
begin
  CDS.ApplyUpdates(0);
end;

procedure Tfrm_CreditoProduto.CDS_ItemAfterInsert(DataSet: TDataSet);
begin
  CDS_ItemPEN_QTDE.AsFloat    := 0;
  CDS_ItemPEN_DATA.AsDateTime := Date;
end;

procedure Tfrm_CreditoProduto.CDS_ItemAfterPost(DataSet: TDataSet);
begin
  CDS.ApplyUpdates(0);
end;

procedure Tfrm_CreditoProduto.ConfigTela;
begin
  btn_OrdCarregamento.Visible := (TipoDeBaixa = 'P');
  sep_OrdCarregamento.Visible := (TipoDeBaixa = 'P');
  groupReqCeramica.Visible    := (TipoDeBaixa = 'P');
  groupEntrega.Visible        := (TipoDeBaixa = 'P');
  btn_ObsMotorista.Visible    := (TipoDeBaixa = 'P');
end;

procedure Tfrm_CreditoProduto.lkpNumVendaClick(Sender: TObject);
begin
  if not CDSVendaVEN_ID.IsNull then
    GridLoads;
end;

procedure Tfrm_CreditoProduto.lkpNumVendaKeyDown(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  FAdicionais.Motorista  := '';
  FAdicionais.Observacao := '';
end;

procedure Tfrm_CreditoProduto.lkpNumVendaKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  FAdicionais.Motorista  := '';
  FAdicionais.Observacao := '';
end;

procedure Tfrm_CreditoProduto.OpenForm(TipoBaixa: ShortString);
begin
  with Tfrm_CreditoProduto.Create(Application) do
    try
      TipoDeBaixa := TipoBaixa;

      FormStyle := fsNormal;
      Visible := False;
      ShowModal;
    finally
      Free;
    end;
end;

procedure Tfrm_CreditoProduto.ToolButton1Click(Sender: TObject);
begin
  if DS.DataSet.IsEmpty then
  begin
    Application.MessageBox('Não há item a ser baixado.', 'AVISO',
      MB_ICONINFORMATION
    );
    Exit;
  end;

  with Tfrm_BaixaCreditoProd.Create(Self) do
  try
    try
      CDS_Item.Insert;
    except
      on E: Exception do
        raise Exception.Create
          ('Erro ao Inserir o Item.'+#10#13+'Erro: ' + E.Message);
    end;
    ShowModal;
  finally
    Free;
  end;
end;

procedure Tfrm_CreditoProduto.ToolButton2Click(Sender: TObject);
begin
  if DS.DataSet.IsEmpty then
  begin
    Application.MessageBox('Não há item a ser excluído.', 'AVISO',
      MB_ICONINFORMATION
    );
    Exit;
  end;

  with Tfrm_ExclBaixaCreditoProd.Create(Self) do
  try
    ShowModal;
  finally
    Free;
  end;
end;

procedure Tfrm_CreditoProduto.btnReqCeramicaClick(Sender: TObject);
const
  SQL =
    ' SELECT' +
    '   COUNT(*)' +
    ' FROM' +
    '   VW_ITEM_PRE_MOLDADOS V' +
    ' INNER JOIN' +
    '   PRODUTO P ON V.PRO_ID = P.PRO_ID' +
    ' WHERE' +
    '   PRO_CERAMICA = ''S'' AND VEN_ID = :VEN_ID AND DT_ENTREGA = :DT_ENTREGA';
begin
  if Trim(lkpNumVenda.Text) = '' then
  begin
    Application.MessageBox('Selecione um nº de venda futura antes de continuar.', 'AVISO',
      MB_ICONINFORMATION
    );
    lkpNumVenda.SetFocus;
    Exit;
  end;

  if DMRet.OpenSQL(SQL, [CDSVendaVEN_ID.Value, edtDtEntrega.DateTime]) = 0 then
  begin
    Application.MessageBox('Não há item para geração da requisição cerâmica '+
      'nesta venda e data de entrega.', 'AVISO', MB_ICONINFORMATION
    );
    Exit;
  end;

  with TImpCerVendaFutura.Create(edtDtEntrega.DateTime) do
  try
    Imprimir(CDSVendaVEN_ID.AsInteger);
  finally
    Free;
  end;
end;

procedure Tfrm_CreditoProduto.DSPAfterUpdateRecord(Sender: TObject;
  SourceDS: TDataSet; DeltaDS: TCustomClientDataSet; UpdateKind: TUpdateKind);
begin
  if UpdateKind <> ukInsert then Exit;

  if DeltaDS.Fields[0].IsNull and (DeltaDS.Fields[0].FieldName = 'PEN_ID') then
    DeltaDS.Fields[0].NewValue := DMRet.OpenSQL('select IDENT_CURRENT(''PRODUTO_ENTREGUE'')', []);
end;

procedure Tfrm_CreditoProduto.FormClose(Sender: TObject;
  var Action: TCloseAction);
var
  i: integer;
begin
  for i := 0 to ComponentCount - 1 do
    if (Components[i] is TDataSet) then
      TDataSet(Components[i]).Close;
end;

procedure Tfrm_CreditoProduto.FormShow(Sender: TObject);
begin
  ConfigTela;
  edtDtEntrega.DateTime := Date;
  CDSVenda.Open;
end;

procedure Tfrm_CreditoProduto.GridLoads;
begin
  CDS.Close;
  CDS.Params[0].Value := CDSVendaVEN_ID.Value;
  CDS.Open;
end;

end.
