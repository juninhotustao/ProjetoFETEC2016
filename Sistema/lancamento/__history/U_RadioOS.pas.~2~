unit U_RadioOS;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, U_PedidoBase, Data.FMTBcd, Data.SqlExpr,
  Data.DB, Vcl.ImgList, Vcl.Menus, Datasnap.DBClient, Datasnap.Provider,
  Vcl.StdCtrls, Vcl.Grids, Vcl.DBGrids, vcl.Wwdbdatetimepicker, Vcl.DBCtrls,
  Vcl.Buttons, Vcl.ExtCtrls, Vcl.ComCtrls, Vcl.ToolWin, Vcl.Mask;

type
  Tfrm_RadioOS = class(Tfrm_PedidoBase)
    DTSVEN_ID: TIntegerField;
    DTSVEN_DATA: TSQLTimeStampField;
    DTSCLI_ID: TIntegerField;
    DTSVDD_ID: TIntegerField;
    DTSTPG_ID: TIntegerField;
    DTSVEN_TIPO: TStringField;
    DTSVEN_VECTO1: TStringField;
    DTSVEN_VECTO2: TStringField;
    DTSVEN_VECTO3: TStringField;
    DTSVEN_VECTO4: TStringField;
    DTSVEN_VECTO5: TStringField;
    DTSVEN_VECTO6: TStringField;
    DTSVEN_VECTO7: TStringField;
    DTSVEN_VECTO8: TStringField;
    DTSVEN_VECTO9: TStringField;
    DTSVEN_VECTO10: TStringField;
    DTSVEN_VECTO11: TStringField;
    DTSVEN_VECTO12: TStringField;
    DTSVEN_TOTAL: TFMTBCDField;
    DTSVEN_DESCONTO: TFMTBCDField;
    DTSVEN_SITUACAO: TStringField;
    DTSVEN_ENTRADA: TFMTBCDField;
    DTSVEN_OBSERVACAO: TStringField;
    DTSTPP_ID: TIntegerField;
    DTSVEN_ENDER_ENTREGA: TStringField;
    DTSVEN_NUM_BLOCO: TIntegerField;
    DTSBAIXADO: TStringField;
    DTSVEN_DT_ENTREGA: TSQLTimeStampField;
    DTSTRP_ID: TIntegerField;
    DTSVEN_CONTATO: TStringField;
    DTSVEN_PRAZO_ENTREGA: TStringField;
    DTSREG_ID: TIntegerField;
    CDSVEN_ID: TIntegerField;
    CDSVEN_DATA: TSQLTimeStampField;
    CDSCLI_ID: TIntegerField;
    CDSVDD_ID: TIntegerField;
    CDSTPG_ID: TIntegerField;
    CDSVEN_TIPO: TStringField;
    CDSVEN_VECTO1: TStringField;
    CDSVEN_VECTO2: TStringField;
    CDSVEN_VECTO3: TStringField;
    CDSVEN_VECTO4: TStringField;
    CDSVEN_VECTO5: TStringField;
    CDSVEN_VECTO6: TStringField;
    CDSVEN_VECTO7: TStringField;
    CDSVEN_VECTO8: TStringField;
    CDSVEN_VECTO9: TStringField;
    CDSVEN_VECTO10: TStringField;
    CDSVEN_VECTO11: TStringField;
    CDSVEN_VECTO12: TStringField;
    CDSVEN_TOTAL: TFMTBCDField;
    CDSVEN_DESCONTO: TFMTBCDField;
    CDSVEN_SITUACAO: TStringField;
    CDSVEN_ENTRADA: TFMTBCDField;
    CDSVEN_OBSERVACAO: TStringField;
    CDSTPP_ID: TIntegerField;
    CDSVEN_ENDER_ENTREGA: TStringField;
    CDSVEN_NUM_BLOCO: TIntegerField;
    CDSBAIXADO: TStringField;
    CDSVEN_DT_ENTREGA: TSQLTimeStampField;
    CDSTRP_ID: TIntegerField;
    CDSVEN_CONTATO: TStringField;
    CDSVEN_PRAZO_ENTREGA: TStringField;
    CDSREG_ID: TIntegerField;
    CDSDTS_Item: TDataSetField;
    DTS_ItemITV_ID: TIntegerField;
    DTS_ItemVEN_ID: TIntegerField;
    DTS_ItemVEN_DATA: TSQLTimeStampField;
    DTS_ItemPRO_ID: TIntegerField;
    DTS_ItemITV_QTDE: TFMTBCDField;
    DTS_ItemITV_DESCONTO: TFMTBCDField;
    DTS_ItemITV_PRECOVENDA: TFMTBCDField;
    DTS_ItemITV_VALORTOTAL: TFMTBCDField;
    DTS_ItemPRO_CUSTOREAL: TFMTBCDField;
    DTS_ItemPRO_CUSTO: TFMTBCDField;
    DTS_ItemITV_UN: TStringField;
    DTS_ItemITV_TIPO: TStringField;
    DTS_ItemITV_DESCRICAO: TStringField;
    DTS_ItemITV_VLRMEDIO: TFMTBCDField;
    DTS_ItemITV_VLR_RATEIO_DESC: TFMTBCDField;
    DTS_ItemITV_REFER: TStringField;
    CDS_ItemITV_ID: TIntegerField;
    CDS_ItemVEN_ID: TIntegerField;
    CDS_ItemVEN_DATA: TSQLTimeStampField;
    CDS_ItemPRO_ID: TIntegerField;
    CDS_ItemITV_QTDE: TFMTBCDField;
    CDS_ItemITV_DESCONTO: TFMTBCDField;
    CDS_ItemITV_PRECOVENDA: TFMTBCDField;
    CDS_ItemITV_VALORTOTAL: TFMTBCDField;
    CDS_ItemPRO_CUSTOREAL: TFMTBCDField;
    CDS_ItemPRO_CUSTO: TFMTBCDField;
    CDS_ItemITV_UN: TStringField;
    CDS_ItemITV_TIPO: TStringField;
    CDS_ItemITV_DESCRICAO: TStringField;
    CDS_ItemITV_VLRMEDIO: TFMTBCDField;
    CDS_ItemITV_VLR_RATEIO_DESC: TFMTBCDField;
    CDS_ItemITV_REFER: TStringField;
    gb_parcelasdias: TGroupBox;
    Label64: TLabel;
    Label65: TLabel;
    Label33: TLabel;
    btnVenc: TSpeedButton;
    wwDBEdit3: TDBEdit;
    wwDBEdit4: TDBEdit;
    wwDBEdit5: TDBEdit;
    wwDBEdit6: TDBEdit;
    wwDBEdit7: TDBEdit;
    wwDBEdit8: TDBEdit;
    wwDBEdit9: TDBEdit;
    wwDBEdit10: TDBEdit;
    wwDBEdit11: TDBEdit;
    wwDBEdit12: TDBEdit;
    wwDBEdit13: TDBEdit;
    wwDBEdit14: TDBEdit;
    CDSTOTAL_LIQDO: TFloatField;
    CDSCondicaoPagto: TStringField;
    CDS_ItemTOTAL_PEDIDO: TAggregateField;
    DTS_ItemVDD_ID: TIntegerField;
    CDS_ItemVDD_ID: TIntegerField;
    GroupBox2: TGroupBox;
    btnEntrega: TSpeedButton;
    procedure btn_novClick(Sender: TObject);
    procedure btn_altClick(Sender: TObject);
    procedure CDSVEN_IDGetText(Sender: TField; var Text: string;
      DisplayText: Boolean);
    procedure CDSVEN_SITUACAOGetText(Sender: TField; var Text: string;
      DisplayText: Boolean);
    procedure lkp_TipoPagtoExit(Sender: TObject);
    procedure btnVencClick(Sender: TObject);
    procedure lkp_TipoPagtoClick(Sender: TObject);
    procedure wwDBEdit4Enter(Sender: TObject);
    procedure CDSAfterInsert(DataSet: TDataSet);
    procedure CDSAfterCancel(DataSet: TDataSet);
    procedure CDSAfterOpen(DataSet: TDataSet);
    procedure CDSBeforePost(DataSet: TDataSet);
    procedure CDSCalcFields(DataSet: TDataSet);
    procedure btn_excClick(Sender: TObject);
    procedure btn_salClick(Sender: TObject);
    procedure wwDBEdit3Exit(Sender: TObject);
    procedure wwDBEdit3KeyPress(Sender: TObject; var Key: Char);
    procedure FormCreate(Sender: TObject);
    procedure CDS_ItemAfterInsert(DataSet: TDataSet);
    procedure CDS_ItemCalcFields(DataSet: TDataSet);
    procedure CDS_ItemAfterPost(DataSet: TDataSet);
    procedure CDS_ItemAfterDelete(DataSet: TDataSet);
    procedure lkp_ClienteExit(Sender: TObject);
    procedure btn_encerraClick(Sender: TObject);
    procedure DSPAfterUpdateRecord(Sender: TObject; SourceDS: TDataSet;
      DeltaDS: TCustomClientDataSet; UpdateKind: TUpdateKind);
    procedure btnEntregaClick(Sender: TObject);
  private
    function ValidaCampos: Boolean;
  public
    class function PedidoPendente(const APedId : Variant): Boolean; override;
  end;

var
  frm_RadioOS: Tfrm_RadioOS;

implementation

uses
  U_DMRet, U_SystemUsuario, U_ItemRadioOS, U_ParcelasPorData, U_PesqRadioOs,
  U_EncerraPedidoRadio, U_ImpRadio;

{$R *.dfm}

procedure Tfrm_RadioOS.btnEntregaClick(Sender: TObject);
begin
  if CDS.IsEmpty then
  begin
    MessageBox(Handle, 'Não há dados para reimpressão!',
      'AVISO',MB_ICONINFORMATION
    );
    Exit;
  end;

  if CDS_Item.IsEmpty then
  begin
    MessageBox(Handle,
      'Lance pelo menos 1 item para imprimir a entrega.',
      'ATENÇÃO!', MB_ICONINFORMATION
    );
    Exit;
  end;

  with TImpRadio .Create do
  try
    Imprimir(CDSVEN_ID.Value);
  finally
    Free;
  end;

end;

procedure Tfrm_RadioOS.btnVencClick(Sender: TObject);
var
  i: Integer;
  ParcelasPorData, ParcInformadas: TStringList;
begin
  ParcInformadas := TStringList.Create;

  try
    //Adicionando as parcelas informadas pelo usuário
    with gb_parcelasdias do
      for i := 0 to ControlCount - 1 do
        if (Controls[i] is TDBEdit) and (TDBEdit(Controls[i]).Text <> '') then
        begin
          ParcInformadas.Add(TDBEdit(Controls[i]).Text);
          TDBEdit(Controls[i]).Field.Clear;
        end;
    //
    ParcelasPorData := Tfrm_ParcelasPorData.GetParcelasPorData(
      CDSVEN_DATA.AsDateTime, ParcInformadas
    );

    for i := 0 to ParcelasPorData.Count - 1 do
      CDS.FieldByName('VEN_VECTO'+ IntToStr(i+1)).Value := ParcelasPorData[i];
    //
  finally
    ParcInformadas.Free;
    ParcelasPorData.Free;
  end;

  wwDBEdit3.SetFocus;
end;

procedure Tfrm_RadioOS.btn_altClick(Sender: TObject);
begin
  if not PedidoPendente(CDSVEN_ID.AsLargeInt) then
  begin
    MessageBox(Handle,
      pchar(format('Não é possível alterar a ordem de serviço se a situação for %s.',
      [CDSVEN_SITUACAO.Text])), 'AVISO', MB_ICONINFORMATION
    );
    Exit;
  end;

  inherited;
end;

procedure Tfrm_RadioOS.btn_encerraClick(Sender: TObject);
var
  DescProdutos: string;
begin
  if not CDS.IsEmpty and CDS_Item.IsEmpty then
  begin
    MessageBox(Handle,
      'Não é possível encerrar uma ordem de serviço sem pelo menos um ' +
      'item lançado.', 'AVISO', MB_ICONINFORMATION
    );
    Exit;
  end;

  if ds.DataSet.FieldByName('VEN_SITUACAO').Value = 'F' then
  begin
    MessageBox(Handle,'Não é possível finalizar um pedido já FINALIZADO!', 'ATENÇÃO', MB_ICONINFORMATION+MB_OK);
    exit;
  end;

  inherited;
end;

procedure Tfrm_RadioOS.btn_excClick(Sender: TObject);
begin
  if not PedidoPendente(CDSVEN_ID.AsLargeInt) then
  begin
    MessageBox(Handle,
      pchar(format('Não é possível excluir a ordem de serviço se a situação for %s.',
      [CDSVEN_SITUACAO.Text])), 'AVISO', MB_ICONINFORMATION
    );
    Exit;
  end;

  inherited;
end;

procedure Tfrm_RadioOS.btn_novClick(Sender: TObject);
begin
  inherited;
  edt_Data.SetFocus;
end;

procedure Tfrm_RadioOS.btn_salClick(Sender: TObject);
begin
  if (ActiveControl is TDBEdit) and Assigned(TDBEdit(ActiveControl).OnExit) then
    TDBEdit(ActiveControl).OnExit(ActiveControl);

  if (ActiveControl is TDBLookupComboBox) and
     Assigned(TDBLookupComboBox(ActiveControl).OnExit) then
    TDBLookupComboBox(ActiveControl).OnExit(ActiveControl);

  if not ValidaCampos then
    Exit;

  inherited;
end;

procedure Tfrm_RadioOS.CDSAfterCancel(DataSet: TDataSet);
begin
  inherited;
  lkp_TipoPagtoClick(Self);
end;

procedure Tfrm_RadioOS.CDSAfterInsert(DataSet: TDataSet);
var
  i: Integer;
begin
  inherited;
  CDSVEN_DATA.AsDateTime := Date;
  CDSVEN_SITUACAO.Value  := 'P';

  for i := 0 to CDS.FieldCount - 1 do
    if (CDS.Fields[i] is TIntegerField) then
      Continue
    else if CDS.Fields[i] is TFMTBCDField then
      CDS.Fields[i].AsFloat := 0;

  lkp_TipoPagtoClick(Self);

  CDSVDD_ID.Value := DMRet.OpenSQL('SELECT TOP 1 VDD_ID FROM VENDEDOR',[]);
end;

procedure Tfrm_RadioOS.CDSAfterOpen(DataSet: TDataSet);
begin
  inherited;
  lkp_TipoPagtoClick(Self);
end;

procedure Tfrm_RadioOS.CDSBeforePost(DataSet: TDataSet);
var
  i: Integer;
begin
  inherited;
  CDSVEN_TIPO.Value  := CDS_TipoPagtoTPG_PAGAMENTO.Value;

  if CDS_TipoPagtoTPG_PAGAMENTO.Value = 'V' then
  begin
    CDSVEN_ENTRADA.AsFloat := 0;

    with gb_parcelasdias do
      for i := 0 to ControlCount - 1 do
      begin
        if not(Controls[i] is TDBEdit) then
          Continue;
        //
        TDBEdit(Controls[i]).Field.Clear;
      end;
  end;

end;

procedure Tfrm_RadioOS.CDSCalcFields(DataSet: TDataSet);
var
  Total: Double;
  j: integer;
  CondPagto: string;
begin
  inherited;

  if CDS_Item.IsEmpty then
    Total := 0
  else
    Total := CDS_ItemTOTAL_PEDIDO.Value;
  //
  CDSTOTAL_LIQDO.Value := Total - CDSVEN_DESCONTO.AsFloat - CDSVEN_ENTRADA.AsFloat;

  //Configura a condição de pagamento para a proposta de orçamento.
  CDSCondicaoPagto.Value := '';

  for j := 0 to CDS.FieldCount - 1 do
  begin
    if CDS.Fields[j].Origin = '1' then
      if cds.Fields[j].AsString <> '' then
        CondPagto := CondPagto + CDS.Fields[j].AsString + '/';
  end;

  Delete(CondPagto, Length(CondPagto), 1);

  if CondPagto = '' then
    CondPagto := 'Pagamento à vista'
  else
    CondPagto := CondPagto + ' dias';

  CDSCondicaoPagto.AsString := CondPagto;
end;

procedure Tfrm_RadioOS.CDSVEN_IDGetText(Sender: TField; var Text: string;
  DisplayText: Boolean);
begin
  inherited;

  if Sender.IsNull then
    Text := 'Automático'
  else
    Text := Sender.Value;
end;

procedure Tfrm_RadioOS.CDSVEN_SITUACAOGetText(Sender: TField; var Text: string;
  DisplayText: Boolean);
begin
  inherited;

  if Sender.IsNull then Exit;
  //
  case Sender.AsString[1] of
    'P': Text := 'PENDENTE';
    'F':
    begin
      if CDSVEN_DT_ENTREGA.IsNull then
        Text := 'FINALIZADO'
      else
        Text := 'ENTREGUE';
    end;
  end;
end;

procedure Tfrm_RadioOS.CDS_ItemAfterDelete(DataSet: TDataSet);
begin
  inherited;
  CDS.Edit;

  if CDS_ItemTOTAL_PEDIDO.IsNull then
    CDSVEN_TOTAL.AsFloat := 0
  else
    CDSVEN_TOTAL.AsVariant := CDS_ItemTOTAL_PEDIDO.AsVariant;
  //
  CDS.Post;
end;

procedure Tfrm_RadioOS.CDS_ItemAfterInsert(DataSet: TDataSet);
begin
  inherited;
  CDS_ItemVDD_ID.Value         := CDSVDD_ID.Value;
  CDS_ItemVEN_DATA.Value       := CDSVEN_DATA.Value;
  CDS_ItemITV_QTDE.AsFloat            := 1;
  CDS_ItemITV_PRECOVENDA.AsFloat      := 0;
  CDS_ItemITV_VALORTOTAL.AsFloat      := 0;
  CDS_ItemITV_VLR_RATEIO_DESC.AsFloat := 0;
  CDS_ItemITV_DESCONTO.AsFloat        := 0;
  CDS_ItemITV_TIPO.Value              := 'S';
end;

procedure Tfrm_RadioOS.CDS_ItemAfterPost(DataSet: TDataSet);
begin
  CDSVEN_TOTAL.AsVariant := CDS_ItemTOTAL_PEDIDO.AsVariant;
  inherited;
end;

procedure Tfrm_RadioOS.CDS_ItemCalcFields(DataSet: TDataSet);
const
  SqlItem =
    'select REFERENCIA, METRAGEM, LAJE from VW_ITEM where TIPO = 0 and ID = :ID';

  SQL_COUNT =
    ' SELECT' +
    '   COUNT(*)' +
    ' FROM' +
    '   ITEM_VENDA' +
    ' WHERE' +
    '   VEN_ID = :VEN_ID AND ITV_ID <= :ITV_ID';
begin
  DataSet.FieldByName('NUM_ITEM').Value := DMRet.OpenSQL(SQL_COUNT,[
    DataSet.FieldByName('VEN_ID').Value, DataSet.FieldByName('ITV_ID').Value
  ]);

  if (DataSet.State <> dsInternalCalc) or (DataSet.FieldByName('PRO_ID').IsNull) then
    Exit;
  //
  with TClientDataSet.Create(nil) do
  try
    Data :=  DMRet.GetData(SqlItem,[DataSet.FieldByName('PRO_ID').Value]);
    //
    DataSet.FieldByName('REFERENCIA').AsString := Fields[0].AsString;
  finally
    Free;
  end;
end;

procedure Tfrm_RadioOS.DSPAfterUpdateRecord(Sender: TObject; SourceDS: TDataSet;
  DeltaDS: TCustomClientDataSet; UpdateKind: TUpdateKind);
begin
  if UpdateKind <> ukInsert then Exit;

  if DeltaDS.Fields[0].IsNull then
  begin
    if DeltaDS.Fields[0].FieldName = 'VEN_ID' then
      DeltaDS.Fields[0].NewValue := DMRet.OpenSQL('select IDENT_CURRENT(''VENDA'')', [])
    else
      DeltaDS.Fields[0].NewValue := DMRet.OpenSQL('select IDENT_CURRENT(''ITEM_VENDA'')', []);
  end;
end;

procedure Tfrm_RadioOS.FormCreate(Sender: TObject);
begin
  inherited;
  FTipoLancto    := 'Rádio';
  LancItemBase   := Tfrm_ItemRadioOS;
  PesqLancBase   := Tfrm_PesqRadioOs;
  EncerraDavBase := Tfrm_EncerraPedidoRadio;
end;

procedure Tfrm_RadioOS.lkp_ClienteExit(Sender: TObject);
begin
  inherited;
  //carrega o vendedor referente ao cliente
  lkp_Vendedor.KeyValue := CDS_ClienteVDD_ID.Value;
end;

procedure Tfrm_RadioOS.lkp_TipoPagtoClick(Sender: TObject);
begin
  inherited;
  gb_parcelasdias.Visible := not VarIsNull(lkp_TipoPagto.KeyValue) and
    (Cds_TipoPagtoTPG_PAGAMENTO.AsString[1] in ['P', 'C']);
end;

procedure Tfrm_RadioOS.lkp_TipoPagtoExit(Sender: TObject);
begin
  inherited;
  if gb_parcelasdias.Visible and pnl_Cabecalho.Enabled then
    wwDBEdit3.SetFocus;
end;

class function Tfrm_RadioOS.PedidoPendente(const APedId: Variant): Boolean;
const
  SqlSituacao = 'select VEN_SITUACAO from VENDA where VEN_ID = :VEN_ID';
var
  Situacao : Variant;
begin
  Result   := True;
  Situacao := DMRet.OpenSQL(SqlSituacao,[APedId]);
  //
  if not VarIsNull(Situacao) and (VarToStr(Situacao) = 'F') then
    Result := False;
end;

function Tfrm_RadioOS.ValidaCampos: Boolean;
begin
  Result := True;

  if not CDSTPG_ID.IsNull and (CDSVEN_VECTO1.AsString = '') and
     (CDS_TipoPagtoTPG_PAGAMENTO.AsString[1] in ['P', 'C']) then
  begin
    Application.MessageBox('Operação inválida! É obrigatório informar no mínimo uma parcela.',
      PChar(Application.Title),MB_ICONINFORMATION+MB_OK);
    wwDBEdit3.SetFocus;
    Result := False;
    Exit;
  end;
end;

procedure Tfrm_RadioOS.wwDBEdit3Exit(Sender: TObject);
var
  edt : TDBEdit;
begin
  inherited;
  edt := TDBEdit(Sender);

  if (edt.Text = '') then
  begin
    if (edt <> wwDBEdit14) and (TDBEdit(Components[edt.ComponentIndex+1]).Text <> '') then
    begin
      edt.SetFocus;
      Abort;
    end;
  end
  else if StrToInt(edt.Text) = 0 then
  begin
    ShowMessage('A parcela tem que ser igual ou superior a 1!');
    edt.SetFocus;
    Abort;
  end;

end;

procedure Tfrm_RadioOS.wwDBEdit3KeyPress(Sender: TObject; var Key: Char);
var
  edt: TDBEdit;
begin
  inherited;

  edt := TDBEdit(Sender);

  if (key = #13) and ((edt = wwDBEdit14) or ((edt.Text = '') and
     (TDBEdit(Components[edt.ComponentIndex+1]).Text = '')))
  then
    db_Observacao.SetFocus;
  //
  if not(key in ['0'..'9', chr(8)]) then key := #0;
end;

procedure Tfrm_RadioOS.wwDBEdit4Enter(Sender: TObject);
var
  edt : TDBEdit;
begin
  inherited;
  edt := TDBEdit(Sender);

  if (edt.Text = '') then
  begin
    if (edt <> wwDBEdit14) and (TDBEdit(Components[edt.ComponentIndex+1]).Text <> '') then
    begin
      edt.SetFocus;
      Abort;
    end;
  end
  else if StrToInt(edt.Text) = 0 then
  begin
    ShowMessage('A parcela tem que ser igual ou superior a 1!');
    edt.SetFocus;
    Abort;
  end;
end;

end.
