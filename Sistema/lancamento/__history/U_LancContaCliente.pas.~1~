unit U_LancContaCliente;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, ExtCtrls, Grids, DBGrids, StdCtrls, ComCtrls, ToolWin, Buttons,
  FMTBcd, DB, DBClient, Provider, SqlExpr, DBCtrls, Menus;

type
  TParams = record
    ParGeraCai: Boolean;
    ParCaixa: Variant;
    ParCaixaClass: Variant;
    ParVddId: Variant;
    ParTaxa: double;
  end;

  Tfrm_LancContaCliente = class(TForm)
    DBGrid1: TDBGrid;
    DBGrid2: TDBGrid;
    Panel2: TPanel;
    Panel3: TPanel;
    ToolBar2: TToolBar;
    btn_nov: TToolButton;
    btn_can: TToolButton;
    btn_tra: TToolButton;
    ToolButton1: TToolButton;
    ToolButton2: TToolButton;
    Panel1: TPanel;
    Label1: TLabel;
    edt_busca: TEdit;
    btn_buscar: TSpeedButton;
    DST: TSQLDataSet;
    DSP: TDataSetProvider;
    CDS: TClientDataSet;
    DS: TDataSource;
    DS_Item: TDataSource;
    CDS_Item: TClientDataSet;
    DS_Link: TDataSource;
    DTS_Item: TSQLDataSet;
    DSTCON_ID: TIntegerField;
    DSTCON_NUM: TStringField;
    DSTCON_DT_ABERT: TSQLTimeStampField;
    DSTCON_SITUACAO: TStringField;
    DTS_ItemICC_ID: TIntegerField;
    DTS_ItemCON_ID: TIntegerField;
    DTS_ItemPRO_ID: TIntegerField;
    DTS_ItemICC_SITUACAO: TStringField;
    CDSCON_ID: TIntegerField;
    CDSCON_NUM: TStringField;
    CDSCON_DT_ABERT: TSQLTimeStampField;
    CDSCON_SITUACAO: TStringField;
    CDSDTS_Item: TDataSetField;
    CDS_ItemICC_ID: TIntegerField;
    CDS_ItemCON_ID: TIntegerField;
    CDS_ItemPRO_ID: TIntegerField;
    CDS_ItemICC_SITUACAO: TStringField;
    CDS_ItemNUM_ITEM: TIntegerField;
    CDS_ItemREFERENCIA: TStringField;
    CDS_ItemDESCRICAO: TStringField;
    CDS_ItemTOTAL: TAggregateField;
    pnlBotoes: TPanel;
    POP: TPopupMenu;
    NovoItem1: TMenuItem;
    CancelarItem1: TMenuItem;
    ransferirItem1: TMenuItem;
    DTS_ItemCON_ID_ORIGEM: TIntegerField;
    CDS_ItemCON_ID_ORIGEM: TIntegerField;
    CDS_ItemTRANSFERENCIA: TStringField;
    btn_pri: TToolButton;
    btn_ant: TToolButton;
    btn_ult: TToolButton;
    btn_pro: TToolButton;
    DTS_ItemICC_QTDE: TFMTBCDField;
    DTS_ItemICC_VLR_UNIT: TFMTBCDField;
    DTS_ItemICC_VLR_TOTAL: TFMTBCDField;
    CDS_ItemICC_QTDE: TFMTBCDField;
    CDS_ItemICC_VLR_UNIT: TFMTBCDField;
    CDS_ItemICC_VLR_TOTAL: TFMTBCDField;
    Label2: TLabel;
    DBText1: TDBText;
    btnConferencia: TSpeedButton;
    btn_encerra: TSpeedButton;
    DSTCON_DESCONTO: TFMTBCDField;
    DSTCON_QTDE_PESSOAS: TIntegerField;
    CDSCON_DESCONTO: TFMTBCDField;
    CDSCON_QTDE_PESSOAS: TIntegerField;
    DSTCON_TAXA_SERVICOS: TFMTBCDField;
    CDSCON_TAXA_SERVICOS: TFMTBCDField;
    CDSTOTAL_PAGTO: TFloatField;
    DSTCON_VLR_COVER: TFMTBCDField;
    CDSCON_VLR_COVER: TFMTBCDField;
    btnReimprimir: TSpeedButton;
    procedure btn_buscarClick(Sender: TObject);
    procedure FormShow(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure CDSCON_SITUACAOGetText(Sender: TField; var Text: string;
      DisplayText: Boolean);
    procedure edt_buscaKeyPress(Sender: TObject; var Key: Char);
    procedure CDS_ItemCalcFields(DataSet: TDataSet);
    procedure btn_novClick(Sender: TObject);
    procedure CDS_ItemAfterInsert(DataSet: TDataSet);
    procedure DSPAfterUpdateRecord(Sender: TObject; SourceDS: TDataSet;
      DeltaDS: TCustomClientDataSet; UpdateKind: TUpdateKind);
    procedure CDS_ItemAfterPost(DataSet: TDataSet);
    procedure btn_canClick(Sender: TObject);
    procedure DBGrid2DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure DBGrid1DrawColumnCell(Sender: TObject; const Rect: TRect;
      DataCol: Integer; Column: TColumn; State: TGridDrawState);
    procedure btn_traClick(Sender: TObject);
    procedure btn_priClick(Sender: TObject);
    procedure btn_antClick(Sender: TObject);
    procedure btn_proClick(Sender: TObject);
    procedure btn_ultClick(Sender: TObject);
    procedure CDSAfterScroll(DataSet: TDataSet);
    procedure FormKeyPress(Sender: TObject; var Key: Char);
    procedure btnConferenciaClick(Sender: TObject);
    procedure btn_encerraClick(Sender: TObject);
    procedure CDSAfterPost(DataSet: TDataSet);
    procedure btnReimprimirClick(Sender: TObject);
  private
    FParams: TParams;
    procedure RecalculaTotal;
  public
    class procedure OpenWithOperButtons;
  end;

var
  frm_LancContaCliente: Tfrm_LancContaCliente;

implementation

uses
  U_DMRet, U_ItemContaCliente, U_TransfContaCliente;

{$R *.dfm}

procedure Tfrm_LancContaCliente.btn_canClick(Sender: TObject);
begin
  if CDS_Item.IsEmpty then
  begin
    MessageBox(Handle, 'Não há Item a ser Cancelado!','AVISO',MB_ICONINFORMATION);
    Exit;
  end;

  if CDS_ItemICC_SITUACAO.Value = 'C' then
  begin
    MessageBox(Handle, 'O Item já foi Cancelado!','AVISO',MB_ICONINFORMATION);
    Exit;
  end;

  if MessageBox(handle,'Tem certeza que deseja cancelar o Item?',pchar(Application.Title),
    MB_ICONQUESTION+MB_YESNO+MB_DEFBUTTON2) = IDNO then Exit;
  //

  try
    CDS_Item.Edit;
    CDS_ItemICC_VLR_TOTAL.AsFloat := 0;
    CDS_ItemICC_SITUACAO.Value    := 'C';
    CDS_Item.Post;
  except
    on E:Exception do
      raise Exception.CreateFmt(
        'Erro ao cancelar o Item.'#13#10+
        'Erro: %s', [E.Message]);
  end;
end;

procedure Tfrm_LancContaCliente.btn_encerraClick(Sender: TObject);
var
  AClass: TPersistentClass;
begin
  if CDSCON_SITUACAO.Value <> 'A' then
    Exit;
  //

  AClass := GetClass('Tfrm_PagtoContaCliente');

  if not Assigned(AClass) then
  begin
    ShowMessage('A classe "Tfrm_PagtoContaCliente" não está registrada.');
    Exit;
  end;

  with TComponentClass(AClass).Create(nil) as TForm do
  try
    if ShowModal <> mrOk then
      Exit;
  finally
    Free;
  end;

  CDS.Close;
  CDS.Open;
end;

procedure Tfrm_LancContaCliente.btn_novClick(Sender: TObject);
begin
  if CDS.IsEmpty then
  begin
    MessageBox(Handle, pchar('Não é possível inserir item se não existir uma conta de cliente'),
      'AVISO',MB_ICONINFORMATION);
    Exit;
  end;
  //
  with Tfrm_ItemContaCliente.Create(Self) do
  try
    try
      CDS_Item.Insert;
    except
      on E:Exception do
        raise Exception.Create(
          'Erro ao Inserir o Item da Conta de Cliente.'#10#13+
          'Erro: '+E.Message);
    end;
    //
    ShowModal;
  finally
    Free;
  end;
end;

procedure Tfrm_LancContaCliente.btn_priClick(Sender: TObject);
begin
  if not CDS_Item.IsEmpty then
  begin
    CDS_Item.First;
    btn_pri.Enabled := False;
    btn_ant.Enabled := False;
    btn_ult.Enabled := True;
    btn_pro.Enabled := True;
  end;
end;

procedure Tfrm_LancContaCliente.btn_proClick(Sender: TObject);
begin
  if not CDS_Item.IsEmpty then
  begin
    CDS_Item.Next;
    btn_pro.Enabled := not CDS_Item.Eof;
    btn_ult.Enabled := not CDS_Item.Eof;
    btn_ant.Enabled := True;
    btn_pri.Enabled := True;
  end;
end;

procedure Tfrm_LancContaCliente.btn_traClick(Sender: TObject);
begin
  if CDS_Item.IsEmpty then
  begin
    MessageBox(Handle, 'Não há Item a ser Transferido!','AVISO',MB_ICONINFORMATION);
    Exit;
  end;

  with Tfrm_TransfContaCliente.Create(Self) do
  try
    try
      CDS_Item.Edit;
    except
      on E: Exception do
        raise Exception.CreateFmt(
          'Erro ao fazer a Transferência do Item da Conta de Cliente.'#10#13+
          'Erro: %s', [E.Message]);
    end;
    ShowModal;
  finally
    Free;
  end;
end;

procedure Tfrm_LancContaCliente.btn_ultClick(Sender: TObject);
begin
  if not CDS_Item.IsEmpty then
  begin
    CDS_Item.Last;
    btn_ult.Enabled := False;
    btn_pro.Enabled := False;
    btn_pri.Enabled := True;
    btn_ant.Enabled := True;
  end;
end;

procedure Tfrm_LancContaCliente.CDSAfterPost(DataSet: TDataSet);
begin
  CDS.ApplyUpdates(0);
end;

procedure Tfrm_LancContaCliente.CDSAfterScroll(DataSet: TDataSet);
begin
  btn_pro.Enabled := True;
  btn_ult.Enabled := True;
  btn_ant.Enabled := True;
  btn_pri.Enabled := True;
end;

procedure Tfrm_LancContaCliente.CDSCON_SITUACAOGetText(Sender: TField;
  var Text: string; DisplayText: Boolean);
begin
  if Sender.Value = 'F' then
    Text := 'FECHADA'
  else
    Text := 'ABERTA';
end;

procedure Tfrm_LancContaCliente.CDS_ItemAfterInsert(DataSet: TDataSet);
begin
  CDS_ItemICC_QTDE.AsFloat   := 0;
  CDS_ItemICC_SITUACAO.Value := 'N';
end;

procedure Tfrm_LancContaCliente.CDS_ItemAfterPost(DataSet: TDataSet);
begin
  CDS.ApplyUpdates(0);
  //
  CDS.Refresh;
  CDS_Item.Last;
end;

procedure Tfrm_LancContaCliente.CDS_ItemCalcFields(DataSet: TDataSet);
const
  SqlTransf =
    'select CON_NUM from CONTA_CLIENTE where CON_ID = :CON_ID';

  SqlItem =
    'select REFERENCIA, DESCRICAO from VW_ITEM where TIPO = 0 and ID = :ID';

  SQL_COUNT =
    ' SELECT' +
    '   COUNT(*)' +
    ' FROM' +
    '   ITEM_CONTA_CLIENTE' +
    ' WHERE' +
    '   CON_ID = :CON_ID AND ICC_ID <= :ICC_ID';
var
  Transf: string;
begin
  inherited;

  if (DataSet.State <> dsInternalCalc) or
      DataSet.FieldByName('PRO_ID').IsNull then
    Exit;
  //

  Transf := '';

  if not DataSet.FieldByName('CON_ID_ORIGEM').IsNull then
    Transf := 'Transf. da Conta de Cliente ' + DMRet.OpenSQL(SqlTransf, [
      DataSet.FieldByName('CON_ID_ORIGEM').Value
    ])
  else if DataSet.FieldByName('ICC_SITUACAO').Value = 'C' then
    TransF := 'CANCELADO';
  //

  DataSet.FieldByName('TRANSFERENCIA').Value := Transf;

  DataSet.FieldByName('NUM_ITEM').Value := DMRet.OpenSQL(SQL_COUNT, [
    DataSet.FieldByName('CON_ID').Value,
    DataSet.FieldByName('ICC_ID').Value
  ]);

  with TClientDataSet.Create(nil) do
  try
    Data :=  DMRet.GetData(SqlItem,[DataSet.FieldByName('PRO_ID').Value]);

    DataSet.FieldByName('REFERENCIA').AsString := Fields[0].AsString;
    DataSet.FieldByName('DESCRICAO').AsString  := Fields[1].AsString;
  finally
    Free;
  end;
end;

procedure Tfrm_LancContaCliente.DBGrid1DrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
  if Column.Index <> 2 then
    Exit;
  //
  if Column.Field.AsString = 'A' then
    DBGrid1.Canvas.Font.Color := clGreen
  else
    DBGrid1.Canvas.Font.Color := clWindowText;
  //
  DBGrid1.DefaultDrawColumnCell(Rect, DataCol, Column, State);
end;

procedure Tfrm_LancContaCliente.DBGrid2DrawColumnCell(Sender: TObject;
  const Rect: TRect; DataCol: Integer; Column: TColumn; State: TGridDrawState);
begin
  // Para alterar a cor da células mude a propriedade 'Font' para 'Brush';
  if CDS_ItemICC_SITUACAO.Value = 'C' then
    DBGrid2.Canvas.Font.Color := clRed;
  //
  DBGrid2.DefaultDrawDataCell(Rect, DBGrid2.columns[datacol].field, State);
end;

procedure Tfrm_LancContaCliente.DSPAfterUpdateRecord(Sender: TObject;
  SourceDS: TDataSet; DeltaDS: TCustomClientDataSet; UpdateKind: TUpdateKind);
begin
  if (UpdateKind = ukInsert) then
    DeltaDS.Fields[0].NewValue := DMRet.OpenSQL('select @@identity',[]);
end;

procedure Tfrm_LancContaCliente.edt_buscaKeyPress(Sender: TObject;
  var Key: Char);
begin
  //
  if not(key in ['0'..'9', #8, #13]) then key := #0;

  if key = #13 then
  begin
    btn_buscarClick(Sender);
    Exit;
  end;
end;

procedure Tfrm_LancContaCliente.FormClose(Sender: TObject;
  var Action: TCloseAction);
var
  i: Integer;
begin
  for i := 0 to ComponentCount - 1 do
    if (Components[i] is TDataSet) then
      (Components[i] as TDataSet).Close;
end;

procedure Tfrm_LancContaCliente.FormKeyPress(Sender: TObject; var Key: Char);
begin
  if Key = #27 then Close;
end;

procedure Tfrm_LancContaCliente.FormShow(Sender: TObject);
const
  SQL =
    ' select' +
    '   PAR_COM_GERACAIXA, PAR_COM_CAIXA, PAR_COM_CAIXA_CLASS, '+
    '   PAR_COM_VENDEDOR, PAR_COM_TAXA_SERVICOS '+
    ' from' +
    '   PARAMS';
begin
  with TClientDataSet.Create(nil) do
  try
    Data := DMRet.GetData(SQL,[]);
    //
    if IsEmpty then Exit;
    //
    FParams.ParGeraCai    := Fields[0].Value = 'S';
    FParams.ParCaixa      := Fields[1].Value;
    FParams.ParCaixaClass := Fields[2].Value;
    FParams.ParVddId      := Fields[3].Value;
    FParams.ParTaxa       := Fields[4].Value;
  finally
    Free;
  end;

  try
    CDS.Open;
  except
    on E: Exception do
      raise Exception.Create(E.Message);
  end;
end;

class procedure Tfrm_LancContaCliente.OpenWithOperButtons;
begin
  with Tfrm_LancContaCliente.Create(nil) do
  try
    pnlBotoes.Visible := True;
    ShowModal;
  finally
    Free;
  end;
end;

procedure Tfrm_LancContaCliente.RecalculaTotal;
var
  VlrTaxa, VlrCover: double;
begin
  VlrCover := CDSCON_VLR_COVER.AsFloat * CDSCON_QTDE_PESSOAS.AsInteger;
  VlrTaxa  := (CDSCON_TAXA_SERVICOS.AsFloat * double(CDS_ItemTOTAL.Value) / 100);

  CDSTOTAL_PAGTO.Value := double(CDS_ItemTOTAL.Value) + VlrCover + VlrTaxa;
end;

procedure Tfrm_LancContaCliente.btnConferenciaClick(Sender: TObject);
var
  AClass: TPersistentClass;
begin
  if CDS.IsEmpty then
  begin
    MessageBox(Handle, PChar('Não existe conta cliente para conferir'), 'AVISO',
      MB_ICONINFORMATION);
    Exit;
  end;

  if CDSCON_SITUACAO.Value <> 'A' then
    Exit;
  //

  AClass := GetClass('Tfrm_ConfContaCliente');

  if not Assigned(AClass) then
  begin
    ShowMessage('A classe "Tfrm_ConfContaCliente" não está registrada.');
    Exit;
  end;

  CDS.Edit;
  CDSCON_DESCONTO.AsFloat := 0;

  if FParams.ParTaxa > 0 then
    CDSCON_TAXA_SERVICOS.AsFloat := FParams.ParTaxa;
  //

  with TComponentClass(AClass).Create(nil) as TForm do
  try
    ShowModal;
  finally
    Free;
  end;
end;

procedure Tfrm_LancContaCliente.btnReimprimirClick(Sender: TObject);
var
  AClass: TPersistentClass;
begin
  if CDSCON_SITUACAO.Value <> 'A' then
    Exit;
  //

  AClass := GetClass('TfrmReimpressao');

  if not Assigned(AClass) then
  begin
    ShowMessage('A classe "TfrmReimpressao" não está registrada.');
    Exit;
  end;

  with TComponentClass(AClass).Create(nil) as TForm do
  try
    ShowModal;
  finally
    Free;
  end;
end;

procedure Tfrm_LancContaCliente.btn_antClick(Sender: TObject);
begin
  if not CDS_Item.IsEmpty then
  begin
    CDS_Item.Prior;
    btn_ant.Enabled := not CDS_Item.Bof;
    btn_pri.Enabled := not CDS_Item.Bof;
    btn_pro.Enabled := True;
    btn_ult.Enabled := True;
  end;
end;

procedure Tfrm_LancContaCliente.btn_buscarClick(Sender: TObject);
begin
  CDS.Refresh;
  //
  if not CDS.Locate('CON_NUM', edt_busca.Text, []) then
    Application.MessageBox(pchar('Não foi encontrada nenhuma conta de cliente '+
      'de número ' + edt_busca.Text), 'ATENÇÃO!', MB_ICONINFORMATION);
  //
  edt_busca.Clear;
end;

initialization
  RegisterClass(Tfrm_LancContaCliente);
finalization
  UnRegisterClass(Tfrm_LancContaCliente);

end.
