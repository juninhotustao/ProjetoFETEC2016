unit U_EncerraDavOs;

interface

uses
  Windows, Messages, SysUtils, Variants, Classes, Graphics, Controls, Forms,
  Dialogs, U_EncerraDavBase, DB, StdCtrls, Mask, DBCtrls, Buttons, ExtCtrls,
  U_PrintDav;

type
  Tfrm_EncerraDavOs = class(Tfrm_EncerraDavBase)
    DS_Cliente: TDataSource;
    DS_Vendedor: TDataSource;
    DS_TipoPagto: TDataSource;
    DS_Mecanico: TDataSource;
    DS_TipoOs: TDataSource;
    procedure btn_EncerraClick(Sender: TObject);
  private
    { Private declarations }
  protected
    procedure Imprimir; override;
    procedure GeraFinanceiro; override;
    //
    function GetKeyField: string; override;
    function PreencheCabecalho : TCabecalho;
    function PreencheItens : TItens;
    function PreencheRodape : TRodape;
    function PreencheDadosAdicionais: TDadosAdicionais;
  public
    { Public declarations }
  end;

var
  frm_EncerraDavOs: Tfrm_EncerraDavOs;

implementation

uses DBClient, U_DMRet, MaskUtils, StrUtils, U_DavOs, U_FuncUtils;

{$R *.dfm}

procedure Tfrm_EncerraDavOs.btn_EncerraClick(Sender: TObject);
begin
  if not Tfrm_DavOs.DavIsPendente(DS.DataSet.FieldByName('DAV_ID').Value) then
  begin
    MessageBox(Handle, 'Não é possível encerrar este DAV-OS, pois a situação do '+
      'mesmo é diferente de Pendente.','AVISO',MB_ICONINFORMATION);
    btn_PendenteClick(Sender);
    Exit;
  end;
  //
  DS.DataSet.FieldByName('DAV_SITUACAO').Value := 'I';
  //
  inherited;
end;

procedure Tfrm_EncerraDavOs.GeraFinanceiro;
begin
  inherited;
  //DAV-OS não gera financeiro
end;

function Tfrm_EncerraDavOs.GetKeyField: string;
begin
  Result := 'DAV_ID';
end;

procedure Tfrm_EncerraDavOs.Imprimir;
begin
  inherited;
  //Imprimindo o DAV-OS
  with TPrintDav.Create do
  try
    Cabecalho       := PreencheCabecalho;
    Itens           := PreencheItens;
    Rodape          := PreencheRodape;
    DadosAdicionais := PreencheDadosAdicionais;
    Imprimir;
  finally
    Free;
  end;
end;

function Tfrm_EncerraDavOs.PreencheCabecalho: TCabecalho;
const
  SqlEmpresa = 'select EMP_NOME, EMP_FANTASIA, EMP_CGC, EMP_TELEFONE from EMPRESAS';
   SqlParams = 'select PAR_TIPO_DAV_OS from PARAMS';
var
  CDS_Empresa : TClientDataSet;
  CnpjCpf, TipoOs : ShortString;
begin
  Result := TCabecalho.Create;
  DS_Vendedor.DataSet.Locate('VDD_ID', DS.DataSet.FieldByName('VDD_ID').Value,[]);
  //
  CDS_Empresa := TClientDataSet.Create(Self);
  CDS_Empresa.Data := DMRet.GetData(SqlEmpresa,[]);
  //
  with Result.Linhas do
  try
    Add(TLinha.Create(39, 'DOCUMENTO AUXILIAR DE VENDA - ORDEM DE SERVICO',
      [TTipoFonte.comp12, TTipoFonte.negrito]));
    Add(TLinha.Create(13, 'NÃO É DOCUMENTO FISCAL - NÃO É VÁLIDO COMO RECIBO E COMO GARANTIA DE MERCADORIA',
      [TTipoFonte.comp12, TTipoFonte.negrito]));
    Add(TLinha.Create(62, 'NÃO COMPROVA PAGAMENTO', [TTipoFonte.comp12, TTipoFonte.negrito]));

    Add(TLinha.Create(60, 'Identificação do Estabelecimento Emitente', [TTipoFonte.negrito]));
    Add(TLinha.Create(03, 'DENOMINAÇÃO: '+Copy(CDS_Empresa.Fields[0].AsString,1,50)+' - '+Copy(CDS_Empresa.Fields[1].AsString,1,50)+
      '   CNPJ: '+FormatMaskText(TConstants.MASK_CNPJ, CDS_Empresa.Fields[2].AsString)+
      '   TEL.:'+FormatMaskText(TConstants.MASK_TEL, CDS_Empresa.Fields[3].AsString), [TTipoFonte.comp17, TTipoFonte.negrito]));

    Add(TLinha.Create(03, 'Identificação do Destinatário', [TTipoFonte.negrito]));

    with DS_Cliente.DataSet do
    begin
      CnpjCpf := IfThen(FieldByName('CLI_TIPOPES').AsString = 'J', 'CNPJ: '+FormatMaskText(TConstants.MASK_CNPJ,
        FieldByName('CLI_CGC').AsString), 'CPF: '+FormatMaskText(TConstants.MASK_CPF, FieldByName('CLI_CPF').AsString));

      Add(TLinha.Create(03, format('%-50s',['NOME: '+ copy(FieldByName('CLI_ID').AsString+'-'+FieldByName('CLI_NOME').AsString,1,43)])+
        Format('%-26s', [CnpjCpf]) + Format('%-21s', ['IE: '+FieldByName('CLI_INSCRICAO').AsString]) + Format('%-19s', ['TEL: '+
        FormatMaskText(TConstants.MASK_TEL, FieldByName('CLI_TELEFONE').AsString)]) + 'HORA: '+FormatDateTime('HH:MM', now),
        [TTipoFonte.comp17]));

      Add(TLinha.Create(03, format('%-97s',[copy('ENDEREÇO: '+FieldByName('CLI_ENDERECO').AsString+' N°: '+FieldByName('CLI_NUMERO').AsString+'  BAIRRO: '+
        FieldByName('CLI_BAIRRO').AsString+'  CIDADE: '+ FieldByName('CLI_CIDADE').AsString+'-'+FieldByName('CLI_ESTADO').AsString,1,96)])+
        Format('%-19s', ['TEL: '+FormatMaskText(TConstants.MASK_TEL, FieldByName('CLI_TELEFONE2').AsString)]) + 'DATA: '+
        DS.DataSet.FieldByName('DAV_DATA').AsString, [TTipoFonte.comp17]));
    end;

    //Verificando Qual tipo de DAV-OS está trabalhando o de Mecânica ou Geral, para
    //posteriormente imprimir as informações pertinente a cada um deles.
    with DS.DataSet do
    begin
      if DMRet.OpenSQL(SqlParams,[])  = 'M' then
      begin
        TipoOs := IfThen(
          not DS.DataSet.FieldByName('TOS_ID').IsNull,
          ' TIPO OS: ' + DS_TipoOs.DataSet.FieldByName('TOS_DESCRICAO').AsString);

        Add(TLinha.Create(03, format('%-30s',['MARCA: '+FieldByName('DAV_MARCA').AsString])+format('%-35s',
          ['MODELO: '+FieldByName('DAV_MODELO').AsString])+format('%-11s', ['ANO: '+FieldByName('DAV_ANO').AsString])+
          format('%-17s', ['PLACA: '+FormatMaskText(TConstants.MASK_PLACA, FieldByName('DAV_PLACA').AsString)])+'RENAVAM: '+
          FieldByName('DAV_RENAVAM').AsString, [TTipoFonte.comp17]));

        Add(TLinha.Create(03, format('%-30s',['KM: '+FieldByName('DAV_KM').AsString])+format('%-35s',
          ['COR: '+FieldByName('DAV_COR').AsString])+format('%-27s', ['MECÂNICO: '+DS_Mecanico.DataSet.
          FieldByName('MEC_NOME').AsString]) + TipoOs, [TTipoFonte.comp17]));

//        Add(TLinha.Create(03, format('Nº DOCUMENTO: %-13.10d',[DS.DataSet.FieldByName('DAV_ID').AsInteger])+format('%-24s',
//          ['Nº DOCUMENTO FISCAL: ']) + format('%-25s',['VEND.: '+copy(DS_Vendedor.DataSet.FieldByName('VDD_NOME').AsString,1,16)])+
//          format('%-31s',['COND. PAGTO: '+copy(DS_TipoPagto.DataSet.FieldByName('TPG_DESCRICAO').AsString,1,16)])+
//          'MECÂNICO: '+Copy(DS_Mecanico.DataSet.FieldByName('MEC_NOME').AsString,1,16), [TTipoFonte.comp17]));
      end
      else
        Add(TLinha.Create(03, 'Nº DE FABRICACAO: '+DS.DataSet.FieldByName('DAV_NUM_FABR').AsString,
          [TTipoFonte.comp17]));

      Add(TLinha.Create(03, format('Nº DO DOCUMENTO: %-15.10d',[DS.DataSet.FieldByName('DAV_ID').AsInteger])+format('%-33s',
        ['Nº DO DOCUMENTO FISCAL: ']) + format('%-32s',[copy('VENDEDOR: '+ DS_Vendedor.DataSet.FieldByName('VDD_NOME').Value,1,34)])+
        'COND. PAGTO: '+copy(DS_TipoPagto.DataSet.FieldByName('TPG_DESCRICAO').Value,1,24), [TTipoFonte.comp17]));
    end;
  finally
    CDS_Empresa.Free;
  end;
end;

function Tfrm_EncerraDavOs.PreencheDadosAdicionais: TDadosAdicionais;
begin
  Result := TDadosAdicionais.Create;
end;

function Tfrm_EncerraDavOs.PreencheItens: TItens;
var
  Dav_Id: LongInt;
  Descricao: string;
  Tam: integer;
begin
  //Feito este procedimento para evitar que espertinhos lançe em dois computadores o mesmo
  //DAV-OS e depois envie o DAV-OS impresso e diga que o mesmo está diferente do computador
  Dav_Id := DS.DataSet.FieldByName('DAV_ID').Value;

  DS.DataSet.Close;
  TClientDataSet(DS.DataSet).Params[0].Value := Dav_Id;
  DS.DataSet.Open;

  Result := TItens.Create;
  Tam    := TFuncUtils.IfThen(Params.ParOrcUmVendedor = 'N', 40, 56);

  with DS_Item.DataSet do
    while not Eof do
    begin
      DS_Vendedor.DataSet.Locate('VDD_ID', FieldByName('VDD_ID').Value,[]);

      Descricao := TFuncUtils.Formatar(FieldByName('IDV_DESCRICAO').AsString, Tam) +
        ' ' + DS_Item.DataSet.FieldByName('PRO_GAVETA').AsString;

      Result.Itens.Add(TItem.Create(
        FieldByName('NUM_ITEM').AsInteger, FieldByName('REFERENCIA').Value,
        IfThen(Params.ParProGaveta, Descricao, FieldByName('IDV_DESCRICAO').AsString),
        FieldByName('UNIDADE').Value, FieldByName('IDV_QTDE').Value,
        FieldByName('IDV_VLR_UN_BASE').Value, FieldByName('IDV_DESC').Value,
        FieldByName('IDV_ACRES').Value, FieldByName('IDV_VLR_TOTAL').Value,
        FieldByName('IDV_SITUACAO').AsString[1], TFuncUtils.IfThen(
          Params.ParOrcUmVendedor = 'S', Null, DS_Vendedor.DataSet.FieldByName('VDD_NOME').Value
        ), FieldByName('PRO_ID').IsNull
      ));

      Next;
    end;
end;

function Tfrm_EncerraDavOs.PreencheRodape: TRodape;
begin
  Result := TRodape.Create;
  //
  Result.SubTotal   := DS_Item.DataSet.FieldByName('TOTAL').Value;
  Result.TotalDesc  := DS.DataSet.FieldByName('DAV_DESCONTO').Value;
  Result.TotalDav   := DS.DataSet.FieldByName('TOTAL_DAV').Value;
  Result.Observacao := DS.DataSet.FieldByName('DAV_OBSERVACAO').AsString;
end;

end.
